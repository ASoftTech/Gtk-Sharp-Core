// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class InetAddressMask : GLib.Object, GLib.IInitable {

		public InetAddressMask (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_inet_address_mask_new(IntPtr addr, uint length, out IntPtr error);

		public unsafe InetAddressMask (GLib.InetAddress addr, uint length) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InetAddressMask)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (addr != null) {
					names.Add ("length");
					vals.Add (new GLib.Value (length));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr error = IntPtr.Zero;
			Raw = g_inet_address_mask_new(addr == null ? IntPtr.Zero : addr.Handle, length, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_inet_address_mask_new_from_string(IntPtr mask_string, out IntPtr error);

		public unsafe InetAddressMask (string mask_string) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InetAddressMask)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_mask_string = GLib.Marshaller.StringToPtrGStrdup (mask_string);
			IntPtr error = IntPtr.Zero;
			Raw = g_inet_address_mask_new_from_string(native_mask_string, out error);
			GLib.Marshaller.Free (native_mask_string);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_inet_address_mask_get_family(IntPtr raw);

		[GLib.Property ("family")]
		public GLib.SocketFamily Family {
			get  {
				int raw_ret = g_inet_address_mask_get_family(Handle);
				GLib.SocketFamily ret = (GLib.SocketFamily) raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_inet_address_mask_get_address(IntPtr raw);

		[GLib.Property ("address")]
		public GLib.InetAddress Address {
			get  {
				IntPtr raw_ret = g_inet_address_mask_get_address(Handle);
				GLib.InetAddress ret = GLib.Object.GetObject(raw_ret) as GLib.InetAddress;
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("address", val);
				val.Dispose ();
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint g_inet_address_mask_get_length(IntPtr raw);

		[GLib.Property ("length")]
		public uint Length {
			get  {
				uint raw_ret = g_inet_address_mask_get_length(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("length", val);
				val.Dispose ();
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GInetAddressMaskClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GInetAddressMaskClass> class_structs;

		static GInetAddressMaskClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GInetAddressMaskClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GInetAddressMaskClass class_struct = (GInetAddressMaskClass) Marshal.PtrToStructure (class_ptr, typeof (GInetAddressMaskClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GInetAddressMaskClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_inet_address_mask_equal(IntPtr raw, IntPtr mask2);

		public bool Equal(GLib.InetAddressMask mask2) {
			bool raw_ret = g_inet_address_mask_equal(Handle, mask2 == null ? IntPtr.Zero : mask2.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_inet_address_mask_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_inet_address_mask_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_inet_address_mask_matches(IntPtr raw, IntPtr address);

		public bool Matches(GLib.InetAddress address) {
			bool raw_ret = g_inet_address_mask_matches(Handle, address == null ? IntPtr.Zero : address.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_inet_address_mask_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = g_inet_address_mask_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_initable_init(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public bool Init(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_initable_init(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
