// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SimpleProxyResolver : GLib.Object, GLib.IProxyResolver {

		public SimpleProxyResolver (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_simple_proxy_resolver_new(IntPtr default_proxy, IntPtr ignore_hosts);

		public SimpleProxyResolver (string default_proxy, string ignore_hosts) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SimpleProxyResolver)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("default_proxy");
				vals.Add (new GLib.Value (default_proxy));
				names.Add ("ignore_hosts");
				vals.Add (new GLib.Value (ignore_hosts));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_default_proxy = GLib.Marshaller.StringToPtrGStrdup (default_proxy);
			Raw = g_simple_proxy_resolver_new(native_default_proxy, GLib.Marshaller.StringToPtrGStrdup(ignore_hosts));
			GLib.Marshaller.Free (native_default_proxy);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_simple_proxy_resolver_set_default_proxy(IntPtr raw, IntPtr default_proxy);

		[GLib.Property ("default-proxy")]
		public string DefaultProxy {
			get {
				GLib.Value val = GetProperty ("default-proxy");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_simple_proxy_resolver_set_default_proxy(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_simple_proxy_resolver_set_ignore_hosts(IntPtr raw, IntPtr ignore_hosts);

		[GLib.Property ("ignore-hosts")]
		public string IgnoreHosts {
			get {
				GLib.Value val = GetProperty ("ignore-hosts");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				g_simple_proxy_resolver_set_ignore_hosts(Handle, GLib.Marshaller.StringToPtrGStrdup(value));
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GSimpleProxyResolverClass {
			IntPtr GReserved1;
			IntPtr GReserved2;
			IntPtr GReserved3;
			IntPtr GReserved4;
			IntPtr GReserved5;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GSimpleProxyResolverClass> class_structs;

		static GSimpleProxyResolverClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GSimpleProxyResolverClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GSimpleProxyResolverClass class_struct = (GSimpleProxyResolverClass) Marshal.PtrToStructure (class_ptr, typeof (GSimpleProxyResolverClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GSimpleProxyResolverClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_simple_proxy_resolver_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_simple_proxy_resolver_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_simple_proxy_resolver_set_uri_proxy(IntPtr raw, IntPtr uri_scheme, IntPtr proxy);

		public void SetUriProxy(string uri_scheme, string proxy) {
			IntPtr native_uri_scheme = GLib.Marshaller.StringToPtrGStrdup (uri_scheme);
			IntPtr native_proxy = GLib.Marshaller.StringToPtrGStrdup (proxy);
			g_simple_proxy_resolver_set_uri_proxy(Handle, native_uri_scheme, native_proxy);
			GLib.Marshaller.Free (native_uri_scheme);
			GLib.Marshaller.Free (native_proxy);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_proxy_resolver_is_supported(IntPtr raw);

		public bool IsSupported { 
			get {
				bool raw_ret = g_proxy_resolver_is_supported(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_proxy_resolver_lookup(IntPtr raw, IntPtr uri, IntPtr cancellable, out IntPtr error);

		public string Lookup(string uri, GLib.Cancellable cancellable) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_proxy_resolver_lookup(Handle, native_uri, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_proxy_resolver_lookup_async(IntPtr raw, IntPtr uri, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void LookupAsync(string uri, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_proxy_resolver_lookup_async(Handle, native_uri, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_uri);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_proxy_resolver_lookup_finish(IntPtr raw, IntPtr result, out IntPtr error);

		public string LookupFinish(GLib.IAsyncResult result) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_proxy_resolver_lookup_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
