// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Win32RegistryKey : GLib.Object, GLib.IInitable {

		public Win32RegistryKey (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_win32_registry_key_new(IntPtr path, out IntPtr error);

		public unsafe Win32RegistryKey (string path) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Win32RegistryKey)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("path");
				vals.Add (new GLib.Value (path));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr error = IntPtr.Zero;
			Raw = g_win32_registry_key_new(native_path, out error);
			GLib.Marshaller.Free (native_path);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_win32_registry_key_get_path(IntPtr raw);

		[GLib.Property ("path")]
		public string Path {
			get  {
				IntPtr raw_ret = g_win32_registry_key_get_path(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[GLib.Property ("path-utf16")]
		public IntPtr PathUtf16 {
			get {
				GLib.Value val = GetProperty ("path-utf16");
				IntPtr ret = (IntPtr) val;
				val.Dispose ();
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GWin32RegistryKeyClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GWin32RegistryKeyClass> class_structs;

		static GWin32RegistryKeyClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GWin32RegistryKeyClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GWin32RegistryKeyClass class_struct = (GWin32RegistryKeyClass) Marshal.PtrToStructure (class_ptr, typeof (GWin32RegistryKeyClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GWin32RegistryKeyClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_win32_registry_key_erase_change_indicator(IntPtr raw);

		public void EraseChangeIndicator() {
			g_win32_registry_key_erase_change_indicator(Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_win32_registry_key_get_child(IntPtr raw, IntPtr subkey, out IntPtr error);

		public unsafe GLib.Win32RegistryKey GetChild(string subkey) {
			IntPtr native_subkey = GLib.Marshaller.StringToPtrGStrdup (subkey);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_win32_registry_key_get_child(Handle, native_subkey, out error);
			GLib.Win32RegistryKey ret = GLib.Object.GetObject(raw_ret) as GLib.Win32RegistryKey;
			GLib.Marshaller.Free (native_subkey);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_win32_registry_key_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_win32_registry_key_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_win32_registry_key_get_value(IntPtr raw, bool auto_expand, IntPtr value_name, out int value_type, IntPtr value_data, out UIntPtr value_data_size, out IntPtr error);

		public unsafe bool GetValue(bool auto_expand, string value_name, out GLib.Win32RegistryValueType value_type, IntPtr value_data, out ulong value_data_size) {
			IntPtr native_value_name = GLib.Marshaller.StringToPtrGStrdup (value_name);
			int native_value_type;
			UIntPtr native_value_data_size;
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_win32_registry_key_get_value(Handle, auto_expand, native_value_name, out native_value_type, value_data, out native_value_data_size, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_value_name);
			value_type = (GLib.Win32RegistryValueType) native_value_type;
			value_data_size = (ulong) native_value_data_size;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_win32_registry_key_has_changed(IntPtr raw);

		public bool HasChanged { 
			get {
				bool raw_ret = g_win32_registry_key_has_changed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_win32_registry_key_watch(IntPtr raw, bool watch_children, int watch_flags, GLibSharp.Win32RegistryKeyWatchCallbackFuncNative cb, IntPtr user_data, out IntPtr error);

		public unsafe bool Watch(bool watch_children, GLib.Win32RegistryKeyWatcherFlags watch_flags, GLib.Win32RegistryKeyWatchCallbackFunc cb) {
			GLibSharp.Win32RegistryKeyWatchCallbackFuncWrapper cb_wrapper = new GLibSharp.Win32RegistryKeyWatchCallbackFuncWrapper (cb);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_win32_registry_key_watch(Handle, watch_children, (int) watch_flags, cb_wrapper.NativeDelegate, IntPtr.Zero, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_initable_init(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public bool Init(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_initable_init(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
