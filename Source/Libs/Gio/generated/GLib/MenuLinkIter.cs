// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class MenuLinkIter : GLib.Object {

		public MenuLinkIter (IntPtr raw) : base(raw) {}

		protected MenuLinkIter() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		static GetNextNativeDelegate GetNext_cb_delegate;
		static GetNextNativeDelegate GetNextVMCallback {
			get {
				if (GetNext_cb_delegate == null)
					GetNext_cb_delegate = new GetNextNativeDelegate (GetNext_cb);
				return GetNext_cb_delegate;
			}
		}

		static void OverrideGetNext (GLib.GType gtype)
		{
			OverrideGetNext (gtype, GetNextVMCallback);
		}

		static void OverrideGetNext (GLib.GType gtype, GetNextNativeDelegate callback)
		{
			GMenuLinkIterClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetNext = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool GetNextNativeDelegate (IntPtr inst, IntPtr out_link, IntPtr value);

		static bool GetNext_cb (IntPtr inst, IntPtr out_link, IntPtr value)
		{
			try {
				MenuLinkIter __obj = GLib.Object.GetObject (inst, false) as MenuLinkIter;
				bool __result;
				__result = __obj.OnGetNext (GLib.Marshaller.Utf8PtrToString (out_link), GLib.Object.GetObject(value) as GLib.MenuModel);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.MenuLinkIter), ConnectionMethod="OverrideGetNext")]
		protected virtual bool OnGetNext (string out_link, GLib.MenuModel value)
		{
			return InternalGetNext (out_link, value);
		}

		private bool InternalGetNext (string out_link, GLib.MenuModel value)
		{
			GetNextNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetNext;
			if (unmanaged == null) return false;

			IntPtr native_out_link = GLib.Marshaller.StringToPtrGStrdup (out_link);
			bool __result = unmanaged (this.Handle, native_out_link, value == null ? IntPtr.Zero : value.Handle);
			GLib.Marshaller.Free (native_out_link);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GMenuLinkIterClass {
			public GetNextNativeDelegate GetNext;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GMenuLinkIterClass> class_structs;

		static GMenuLinkIterClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GMenuLinkIterClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GMenuLinkIterClass class_struct = (GMenuLinkIterClass) Marshal.PtrToStructure (class_ptr, typeof (GMenuLinkIterClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GMenuLinkIterClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_menu_link_iter_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = g_menu_link_iter_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_menu_link_iter_get_next(IntPtr raw, IntPtr out_link, IntPtr value);

		public bool GetNext(string out_link, GLib.MenuModel value) {
			IntPtr native_out_link = GLib.Marshaller.StringToPtrGStrdup (out_link);
			bool raw_ret = g_menu_link_iter_get_next(Handle, native_out_link, value == null ? IntPtr.Zero : value.Handle);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_out_link);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_menu_link_iter_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_menu_link_iter_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_menu_link_iter_get_value(IntPtr raw);

		public GLib.MenuModel Value { 
			get {
				IntPtr raw_ret = g_menu_link_iter_get_value(Handle);
				GLib.MenuModel ret = GLib.Object.GetObject(raw_ret) as GLib.MenuModel;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_menu_link_iter_next(IntPtr raw);

		public bool Next() {
			bool raw_ret = g_menu_link_iter_next(Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
