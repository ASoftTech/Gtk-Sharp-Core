// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TlsInteraction : GLib.Object {

		public TlsInteraction (IntPtr raw) : base(raw) {}

		protected TlsInteraction() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		static AskPasswordNativeDelegate AskPassword_cb_delegate;
		static AskPasswordNativeDelegate AskPasswordVMCallback {
			get {
				if (AskPassword_cb_delegate == null)
					AskPassword_cb_delegate = new AskPasswordNativeDelegate (AskPassword_cb);
				return AskPassword_cb_delegate;
			}
		}

		static void OverrideAskPassword (GLib.GType gtype)
		{
			OverrideAskPassword (gtype, AskPasswordVMCallback);
		}

		static void OverrideAskPassword (GLib.GType gtype, AskPasswordNativeDelegate callback)
		{
			GTlsInteractionClass class_iface = GetClassStruct (gtype, false);
			class_iface.AskPassword = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int AskPasswordNativeDelegate (IntPtr inst, IntPtr password, IntPtr cancellable, out IntPtr error);

		static int AskPassword_cb (IntPtr inst, IntPtr password, IntPtr cancellable, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				TlsInteraction __obj = GLib.Object.GetObject (inst, false) as TlsInteraction;
				GLib.TlsInteractionResult __result;
				__result = __obj.OnAskPassword (GLib.Object.GetObject(password) as GLib.TlsPassword, GLib.Object.GetObject(cancellable) as GLib.Cancellable);
				return (int) __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.TlsInteraction), ConnectionMethod="OverrideAskPassword")]
		protected virtual GLib.TlsInteractionResult OnAskPassword (GLib.TlsPassword password, GLib.Cancellable cancellable)
		{
			return InternalAskPassword (password, cancellable);
		}

		private GLib.TlsInteractionResult InternalAskPassword (GLib.TlsPassword password, GLib.Cancellable cancellable)
		{
			AskPasswordNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AskPassword;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr error = IntPtr.Zero;
			int __result = unmanaged (this.Handle, password == null ? IntPtr.Zero : password.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			return (GLib.TlsInteractionResult) __result;
		}

		static AskPasswordAsyncNativeDelegate AskPasswordAsync_cb_delegate;
		static AskPasswordAsyncNativeDelegate AskPasswordAsyncVMCallback {
			get {
				if (AskPasswordAsync_cb_delegate == null)
					AskPasswordAsync_cb_delegate = new AskPasswordAsyncNativeDelegate (AskPasswordAsync_cb);
				return AskPasswordAsync_cb_delegate;
			}
		}

		static void OverrideAskPasswordAsync (GLib.GType gtype)
		{
			OverrideAskPasswordAsync (gtype, AskPasswordAsyncVMCallback);
		}

		static void OverrideAskPasswordAsync (GLib.GType gtype, AskPasswordAsyncNativeDelegate callback)
		{
			GTlsInteractionClass class_iface = GetClassStruct (gtype, false);
			class_iface.AskPasswordAsync = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AskPasswordAsyncNativeDelegate (IntPtr inst, IntPtr password, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		static void AskPasswordAsync_cb (IntPtr inst, IntPtr password, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data)
		{
			try {
				TlsInteraction __obj = GLib.Object.GetObject (inst, false) as TlsInteraction;
				GLibSharp.AsyncReadyCallbackInvoker cb_invoker = new GLibSharp.AsyncReadyCallbackInvoker (cb, user_data);
				__obj.OnAskPasswordAsync (GLib.Object.GetObject(password) as GLib.TlsPassword, GLib.Object.GetObject(cancellable) as GLib.Cancellable, cb_invoker.Handler);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.TlsInteraction), ConnectionMethod="OverrideAskPasswordAsync")]
		protected virtual void OnAskPasswordAsync (GLib.TlsPassword password, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb)
		{
			InternalAskPasswordAsync (password, cancellable, cb);
		}

		private void InternalAskPasswordAsync (GLib.TlsPassword password, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb)
		{
			AskPasswordAsyncNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AskPasswordAsync;
			if (unmanaged == null) return;

			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			unmanaged (this.Handle, password == null ? IntPtr.Zero : password.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		static AskPasswordFinishNativeDelegate AskPasswordFinish_cb_delegate;
		static AskPasswordFinishNativeDelegate AskPasswordFinishVMCallback {
			get {
				if (AskPasswordFinish_cb_delegate == null)
					AskPasswordFinish_cb_delegate = new AskPasswordFinishNativeDelegate (AskPasswordFinish_cb);
				return AskPasswordFinish_cb_delegate;
			}
		}

		static void OverrideAskPasswordFinish (GLib.GType gtype)
		{
			OverrideAskPasswordFinish (gtype, AskPasswordFinishVMCallback);
		}

		static void OverrideAskPasswordFinish (GLib.GType gtype, AskPasswordFinishNativeDelegate callback)
		{
			GTlsInteractionClass class_iface = GetClassStruct (gtype, false);
			class_iface.AskPasswordFinish = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int AskPasswordFinishNativeDelegate (IntPtr inst, IntPtr result, out IntPtr error);

		static int AskPasswordFinish_cb (IntPtr inst, IntPtr result, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				TlsInteraction __obj = GLib.Object.GetObject (inst, false) as TlsInteraction;
				GLib.TlsInteractionResult __result;
				__result = __obj.OnAskPasswordFinish (GLib.AsyncResultAdapter.GetObject (result, false));
				return (int) __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.TlsInteraction), ConnectionMethod="OverrideAskPasswordFinish")]
		protected virtual GLib.TlsInteractionResult OnAskPasswordFinish (GLib.IAsyncResult result)
		{
			return InternalAskPasswordFinish (result);
		}

		private GLib.TlsInteractionResult InternalAskPasswordFinish (GLib.IAsyncResult result)
		{
			AskPasswordFinishNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AskPasswordFinish;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr error = IntPtr.Zero;
			int __result = unmanaged (this.Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			return (GLib.TlsInteractionResult) __result;
		}

		static RequestCertificateNativeDelegate RequestCertificate_cb_delegate;
		static RequestCertificateNativeDelegate RequestCertificateVMCallback {
			get {
				if (RequestCertificate_cb_delegate == null)
					RequestCertificate_cb_delegate = new RequestCertificateNativeDelegate (RequestCertificate_cb);
				return RequestCertificate_cb_delegate;
			}
		}

		static void OverrideRequestCertificate (GLib.GType gtype)
		{
			OverrideRequestCertificate (gtype, RequestCertificateVMCallback);
		}

		static void OverrideRequestCertificate (GLib.GType gtype, RequestCertificateNativeDelegate callback)
		{
			GTlsInteractionClass class_iface = GetClassStruct (gtype, false);
			class_iface.RequestCertificate = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int RequestCertificateNativeDelegate (IntPtr inst, IntPtr connection, int flags, IntPtr cancellable, out IntPtr error);

		static int RequestCertificate_cb (IntPtr inst, IntPtr connection, int flags, IntPtr cancellable, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				TlsInteraction __obj = GLib.Object.GetObject (inst, false) as TlsInteraction;
				GLib.TlsInteractionResult __result;
				__result = __obj.OnRequestCertificate (GLib.Object.GetObject(connection) as GLib.TlsConnection, (GLib.TlsCertificateRequestFlags) flags, GLib.Object.GetObject(cancellable) as GLib.Cancellable);
				return (int) __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.TlsInteraction), ConnectionMethod="OverrideRequestCertificate")]
		protected virtual GLib.TlsInteractionResult OnRequestCertificate (GLib.TlsConnection connection, GLib.TlsCertificateRequestFlags flags, GLib.Cancellable cancellable)
		{
			return InternalRequestCertificate (connection, flags, cancellable);
		}

		private GLib.TlsInteractionResult InternalRequestCertificate (GLib.TlsConnection connection, GLib.TlsCertificateRequestFlags flags, GLib.Cancellable cancellable)
		{
			RequestCertificateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RequestCertificate;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr error = IntPtr.Zero;
			int __result = unmanaged (this.Handle, connection == null ? IntPtr.Zero : connection.Handle, (int) flags, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			return (GLib.TlsInteractionResult) __result;
		}

		static RequestCertificateAsyncNativeDelegate RequestCertificateAsync_cb_delegate;
		static RequestCertificateAsyncNativeDelegate RequestCertificateAsyncVMCallback {
			get {
				if (RequestCertificateAsync_cb_delegate == null)
					RequestCertificateAsync_cb_delegate = new RequestCertificateAsyncNativeDelegate (RequestCertificateAsync_cb);
				return RequestCertificateAsync_cb_delegate;
			}
		}

		static void OverrideRequestCertificateAsync (GLib.GType gtype)
		{
			OverrideRequestCertificateAsync (gtype, RequestCertificateAsyncVMCallback);
		}

		static void OverrideRequestCertificateAsync (GLib.GType gtype, RequestCertificateAsyncNativeDelegate callback)
		{
			GTlsInteractionClass class_iface = GetClassStruct (gtype, false);
			class_iface.RequestCertificateAsync = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RequestCertificateAsyncNativeDelegate (IntPtr inst, IntPtr connection, int flags, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		static void RequestCertificateAsync_cb (IntPtr inst, IntPtr connection, int flags, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data)
		{
			try {
				TlsInteraction __obj = GLib.Object.GetObject (inst, false) as TlsInteraction;
				GLibSharp.AsyncReadyCallbackInvoker cb_invoker = new GLibSharp.AsyncReadyCallbackInvoker (cb, user_data);
				__obj.OnRequestCertificateAsync (GLib.Object.GetObject(connection) as GLib.TlsConnection, (GLib.TlsCertificateRequestFlags) flags, GLib.Object.GetObject(cancellable) as GLib.Cancellable, cb_invoker.Handler);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.TlsInteraction), ConnectionMethod="OverrideRequestCertificateAsync")]
		protected virtual void OnRequestCertificateAsync (GLib.TlsConnection connection, GLib.TlsCertificateRequestFlags flags, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb)
		{
			InternalRequestCertificateAsync (connection, flags, cancellable, cb);
		}

		private void InternalRequestCertificateAsync (GLib.TlsConnection connection, GLib.TlsCertificateRequestFlags flags, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb)
		{
			RequestCertificateAsyncNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RequestCertificateAsync;
			if (unmanaged == null) return;

			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			unmanaged (this.Handle, connection == null ? IntPtr.Zero : connection.Handle, (int) flags, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		static RequestCertificateFinishNativeDelegate RequestCertificateFinish_cb_delegate;
		static RequestCertificateFinishNativeDelegate RequestCertificateFinishVMCallback {
			get {
				if (RequestCertificateFinish_cb_delegate == null)
					RequestCertificateFinish_cb_delegate = new RequestCertificateFinishNativeDelegate (RequestCertificateFinish_cb);
				return RequestCertificateFinish_cb_delegate;
			}
		}

		static void OverrideRequestCertificateFinish (GLib.GType gtype)
		{
			OverrideRequestCertificateFinish (gtype, RequestCertificateFinishVMCallback);
		}

		static void OverrideRequestCertificateFinish (GLib.GType gtype, RequestCertificateFinishNativeDelegate callback)
		{
			GTlsInteractionClass class_iface = GetClassStruct (gtype, false);
			class_iface.RequestCertificateFinish = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int RequestCertificateFinishNativeDelegate (IntPtr inst, IntPtr result, out IntPtr error);

		static int RequestCertificateFinish_cb (IntPtr inst, IntPtr result, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				TlsInteraction __obj = GLib.Object.GetObject (inst, false) as TlsInteraction;
				GLib.TlsInteractionResult __result;
				__result = __obj.OnRequestCertificateFinish (GLib.AsyncResultAdapter.GetObject (result, false));
				return (int) __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.TlsInteraction), ConnectionMethod="OverrideRequestCertificateFinish")]
		protected virtual GLib.TlsInteractionResult OnRequestCertificateFinish (GLib.IAsyncResult result)
		{
			return InternalRequestCertificateFinish (result);
		}

		private GLib.TlsInteractionResult InternalRequestCertificateFinish (GLib.IAsyncResult result)
		{
			RequestCertificateFinishNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RequestCertificateFinish;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr error = IntPtr.Zero;
			int __result = unmanaged (this.Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			return (GLib.TlsInteractionResult) __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GTlsInteractionClass {
			public AskPasswordNativeDelegate AskPassword;
			public AskPasswordAsyncNativeDelegate AskPasswordAsync;
			public AskPasswordFinishNativeDelegate AskPasswordFinish;
			public RequestCertificateNativeDelegate RequestCertificate;
			public RequestCertificateAsyncNativeDelegate RequestCertificateAsync;
			public RequestCertificateFinishNativeDelegate RequestCertificateFinish;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=21)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GTlsInteractionClass> class_structs;

		static GTlsInteractionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GTlsInteractionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GTlsInteractionClass class_struct = (GTlsInteractionClass) Marshal.PtrToStructure (class_ptr, typeof (GTlsInteractionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GTlsInteractionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe int g_tls_interaction_ask_password(IntPtr raw, IntPtr password, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.TlsInteractionResult AskPassword(GLib.TlsPassword password, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			int raw_ret = g_tls_interaction_ask_password(Handle, password == null ? IntPtr.Zero : password.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.TlsInteractionResult ret = (GLib.TlsInteractionResult) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_tls_interaction_ask_password_async(IntPtr raw, IntPtr password, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void AskPasswordAsync(GLib.TlsPassword password, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_tls_interaction_ask_password_async(Handle, password == null ? IntPtr.Zero : password.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe int g_tls_interaction_ask_password_finish(IntPtr raw, IntPtr result, out IntPtr error);

		public unsafe GLib.TlsInteractionResult AskPasswordFinish(GLib.IAsyncResult result) {
			IntPtr error = IntPtr.Zero;
			int raw_ret = g_tls_interaction_ask_password_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			GLib.TlsInteractionResult ret = (GLib.TlsInteractionResult) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_tls_interaction_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_tls_interaction_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe int g_tls_interaction_invoke_ask_password(IntPtr raw, IntPtr password, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.TlsInteractionResult InvokeAskPassword(GLib.TlsPassword password, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			int raw_ret = g_tls_interaction_invoke_ask_password(Handle, password == null ? IntPtr.Zero : password.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.TlsInteractionResult ret = (GLib.TlsInteractionResult) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe int g_tls_interaction_invoke_request_certificate(IntPtr raw, IntPtr connection, int flags, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.TlsInteractionResult InvokeRequestCertificate(GLib.TlsConnection connection, GLib.TlsCertificateRequestFlags flags, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			int raw_ret = g_tls_interaction_invoke_request_certificate(Handle, connection == null ? IntPtr.Zero : connection.Handle, (int) flags, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.TlsInteractionResult ret = (GLib.TlsInteractionResult) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe int g_tls_interaction_request_certificate(IntPtr raw, IntPtr connection, int flags, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.TlsInteractionResult RequestCertificate(GLib.TlsConnection connection, GLib.TlsCertificateRequestFlags flags, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			int raw_ret = g_tls_interaction_request_certificate(Handle, connection == null ? IntPtr.Zero : connection.Handle, (int) flags, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.TlsInteractionResult ret = (GLib.TlsInteractionResult) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_tls_interaction_request_certificate_async(IntPtr raw, IntPtr connection, int flags, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void RequestCertificateAsync(GLib.TlsConnection connection, GLib.TlsCertificateRequestFlags flags, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_tls_interaction_request_certificate_async(Handle, connection == null ? IntPtr.Zero : connection.Handle, (int) flags, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe int g_tls_interaction_request_certificate_finish(IntPtr raw, IntPtr result, out IntPtr error);

		public unsafe GLib.TlsInteractionResult RequestCertificateFinish(GLib.IAsyncResult result) {
			IntPtr error = IntPtr.Zero;
			int raw_ret = g_tls_interaction_request_certificate_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			GLib.TlsInteractionResult ret = (GLib.TlsInteractionResult) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
