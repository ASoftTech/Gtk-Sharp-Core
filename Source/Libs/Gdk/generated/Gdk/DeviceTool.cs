// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DeviceTool : GLib.Object {

		public DeviceTool (IntPtr raw) : base(raw) {}

		protected DeviceTool() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gdk_device_tool_get_serial(IntPtr raw);

		[GLib.Property ("serial")]
		public ulong Serial {
			get  {
				ulong raw_ret = gdk_device_tool_get_serial(Handle);
				ulong ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_device_tool_get_tool_type(IntPtr raw);

		[GLib.Property ("tool-type")]
		public Gdk.DeviceToolType ToolType {
			get  {
				int raw_ret = gdk_device_tool_get_tool_type(Handle);
				Gdk.DeviceToolType ret = (Gdk.DeviceToolType) raw_ret;
				return ret;
			}
		}

		[GLib.Property ("axes")]
		public Gdk.AxisFlags Axes {
			get {
				GLib.Value val = GetProperty ("axes");
				Gdk.AxisFlags ret = (Gdk.AxisFlags) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gdk_device_tool_get_hardware_id(IntPtr raw);

		[GLib.Property ("hardware-id")]
		public ulong HardwareId {
			get  {
				ulong raw_ret = gdk_device_tool_get_hardware_id(Handle);
				ulong ret = raw_ret;
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdkDeviceToolClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GdkDeviceToolClass> class_structs;

		static GdkDeviceToolClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdkDeviceToolClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdkDeviceToolClass class_struct = (GdkDeviceToolClass) Marshal.PtrToStructure (class_ptr, typeof (GdkDeviceToolClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdkDeviceToolClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_device_tool_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_device_tool_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
