// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DisplayManager : GLib.Object {

		public DisplayManager (IntPtr raw) : base(raw) {}

		protected DisplayManager() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get_default_display(IntPtr raw);

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_manager_set_default_display(IntPtr raw, IntPtr display);

		[GLib.Property ("default-display")]
		public Gdk.Display DefaultDisplay {
			get  {
				IntPtr raw_ret = gdk_display_manager_get_default_display(Handle);
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
			set  {
				gdk_display_manager_set_default_display(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Signal("display-opened")]
		public event Gdk.DisplayOpenedHandler DisplayOpened {
			add {
				this.AddSignalHandler ("display-opened", value, typeof (Gdk.DisplayOpenedArgs));
			}
			remove {
				this.RemoveSignalHandler ("display-opened", value);
			}
		}

		static DisplayOpenedNativeDelegate DisplayOpened_cb_delegate;
		static DisplayOpenedNativeDelegate DisplayOpenedVMCallback {
			get {
				if (DisplayOpened_cb_delegate == null)
					DisplayOpened_cb_delegate = new DisplayOpenedNativeDelegate (DisplayOpened_cb);
				return DisplayOpened_cb_delegate;
			}
		}

		static void OverrideDisplayOpened (GLib.GType gtype)
		{
			OverrideDisplayOpened (gtype, DisplayOpenedVMCallback);
		}

		static void OverrideDisplayOpened (GLib.GType gtype, DisplayOpenedNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.DisplayOpened = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DisplayOpenedNativeDelegate (IntPtr inst, IntPtr display);

		static void DisplayOpened_cb (IntPtr inst, IntPtr display)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				__obj.OnDisplayOpened (GLib.Object.GetObject(display) as Gdk.Display);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideDisplayOpened")]
		protected virtual void OnDisplayOpened (Gdk.Display display)
		{
			InternalDisplayOpened (display);
		}

		private void InternalDisplayOpened (Gdk.Display display)
		{
			DisplayOpenedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DisplayOpened;
			if (unmanaged == null) return;

			unmanaged (this.Handle, display == null ? IntPtr.Zero : display.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdkDisplayManagerClass {
			public DisplayOpenedNativeDelegate DisplayOpened;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GdkDisplayManagerClass> class_structs;

		static GdkDisplayManagerClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdkDisplayManagerClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdkDisplayManagerClass class_struct = (GdkDisplayManagerClass) Marshal.PtrToStructure (class_ptr, typeof (GdkDisplayManagerClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdkDisplayManagerClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get();

		public static Gdk.DisplayManager Get() {
			IntPtr raw_ret = gdk_display_manager_get();
			Gdk.DisplayManager ret = GLib.Object.GetObject(raw_ret) as Gdk.DisplayManager;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_display_manager_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_open_display(IntPtr raw, IntPtr name);

		public Gdk.Display OpenDisplay(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gdk_display_manager_open_display(Handle, native_name);
			Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

#endregion
	}
}
