// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class EventController : GLib.Object {

		public EventController (IntPtr raw) : base(raw) {}

		protected EventController() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_event_controller_get_widget(IntPtr raw);

		[GLib.Property ("widget")]
		public Gtk.Widget Widget {
			get  {
				IntPtr raw_ret = gtk_event_controller_get_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_event_controller_get_propagation_phase(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_event_controller_set_propagation_phase(IntPtr raw, int phase);

		[GLib.Property ("propagation-phase")]
		public Gtk.PropagationPhase PropagationPhase {
			get  {
				int raw_ret = gtk_event_controller_get_propagation_phase(Handle);
				Gtk.PropagationPhase ret = (Gtk.PropagationPhase) raw_ret;
				return ret;
			}
			set  {
				gtk_event_controller_set_propagation_phase(Handle, (int) value);
			}
		}

		static HandleEventNativeDelegate HandleEvent_cb_delegate;
		static HandleEventNativeDelegate HandleEventVMCallback {
			get {
				if (HandleEvent_cb_delegate == null)
					HandleEvent_cb_delegate = new HandleEventNativeDelegate (HandleEvent_cb);
				return HandleEvent_cb_delegate;
			}
		}

		static void OverrideHandleEvent (GLib.GType gtype)
		{
			OverrideHandleEvent (gtype, HandleEventVMCallback);
		}

		static void OverrideHandleEvent (GLib.GType gtype, HandleEventNativeDelegate callback)
		{
			GtkEventControllerClass class_iface = GetClassStruct (gtype, false);
			class_iface.HandleEvent = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool HandleEventNativeDelegate (IntPtr inst, IntPtr evnt);

		static bool HandleEvent_cb (IntPtr inst, IntPtr evnt)
		{
			try {
				EventController __obj = GLib.Object.GetObject (inst, false) as EventController;
				bool __result;
				__result = __obj.OnHandleEvent (Gdk.Event.GetEvent (evnt));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.EventController), ConnectionMethod="OverrideHandleEvent")]
		protected virtual bool OnHandleEvent (Gdk.Event evnt)
		{
			return InternalHandleEvent (evnt);
		}

		private bool InternalHandleEvent (Gdk.Event evnt)
		{
			HandleEventNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).HandleEvent;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			return __result;
		}

		static ResetNativeDelegate Reset_cb_delegate;
		static ResetNativeDelegate ResetVMCallback {
			get {
				if (Reset_cb_delegate == null)
					Reset_cb_delegate = new ResetNativeDelegate (Reset_cb);
				return Reset_cb_delegate;
			}
		}

		static void OverrideReset (GLib.GType gtype)
		{
			OverrideReset (gtype, ResetVMCallback);
		}

		static void OverrideReset (GLib.GType gtype, ResetNativeDelegate callback)
		{
			GtkEventControllerClass class_iface = GetClassStruct (gtype, false);
			class_iface.Reset = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ResetNativeDelegate (IntPtr inst);

		static void Reset_cb (IntPtr inst)
		{
			try {
				EventController __obj = GLib.Object.GetObject (inst, false) as EventController;
				__obj.OnReset ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.EventController), ConnectionMethod="OverrideReset")]
		protected virtual void OnReset ()
		{
			InternalReset ();
		}

		private void InternalReset ()
		{
			ResetNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Reset;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static FilterEventNativeDelegate FilterEvent_cb_delegate;
		static FilterEventNativeDelegate FilterEventVMCallback {
			get {
				if (FilterEvent_cb_delegate == null)
					FilterEvent_cb_delegate = new FilterEventNativeDelegate (FilterEvent_cb);
				return FilterEvent_cb_delegate;
			}
		}

		static void OverrideFilterEvent (GLib.GType gtype)
		{
			OverrideFilterEvent (gtype, FilterEventVMCallback);
		}

		static void OverrideFilterEvent (GLib.GType gtype, FilterEventNativeDelegate callback)
		{
			GtkEventControllerClass class_iface = GetClassStruct (gtype, false);
			class_iface.FilterEvent = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool FilterEventNativeDelegate (IntPtr inst, IntPtr evnt);

		static bool FilterEvent_cb (IntPtr inst, IntPtr evnt)
		{
			try {
				EventController __obj = GLib.Object.GetObject (inst, false) as EventController;
				bool __result;
				__result = __obj.OnFilterEvent (Gdk.Event.GetEvent (evnt));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.EventController), ConnectionMethod="OverrideFilterEvent")]
		protected virtual bool OnFilterEvent (Gdk.Event evnt)
		{
			return InternalFilterEvent (evnt);
		}

		private bool InternalFilterEvent (Gdk.Event evnt)
		{
			FilterEventNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).FilterEvent;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkEventControllerClass {
			public HandleEventNativeDelegate HandleEvent;
			public ResetNativeDelegate Reset;
			public FilterEventNativeDelegate FilterEvent;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkEventControllerClass> class_structs;

		static GtkEventControllerClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkEventControllerClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkEventControllerClass class_struct = (GtkEventControllerClass) Marshal.PtrToStructure (class_ptr, typeof (GtkEventControllerClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkEventControllerClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_event_controller_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_event_controller_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_event_controller_handle_event(IntPtr raw, IntPtr evnt);

		public bool HandleEvent(Gdk.Event evnt) {
			bool raw_ret = gtk_event_controller_handle_event(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_event_controller_reset(IntPtr raw);

		public void Reset() {
			gtk_event_controller_reset(Handle);
		}

#endregion
	}
}
