// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TrashMonitor : GLib.Object {

		public TrashMonitor (IntPtr raw) : base(raw) {}

		protected TrashMonitor() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Signal("trash-state-changed")]
		public event System.EventHandler TrashStateChanged {
			add {
				this.AddSignalHandler ("trash-state-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("trash-state-changed", value);
			}
		}

		static TrashStateChangedNativeDelegate TrashStateChanged_cb_delegate;
		static TrashStateChangedNativeDelegate TrashStateChangedVMCallback {
			get {
				if (TrashStateChanged_cb_delegate == null)
					TrashStateChanged_cb_delegate = new TrashStateChangedNativeDelegate (TrashStateChanged_cb);
				return TrashStateChanged_cb_delegate;
			}
		}

		static void OverrideTrashStateChanged (GLib.GType gtype)
		{
			OverrideTrashStateChanged (gtype, TrashStateChangedVMCallback);
		}

		static void OverrideTrashStateChanged (GLib.GType gtype, TrashStateChangedNativeDelegate callback)
		{
			GtkTrashMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.TrashStateChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TrashStateChangedNativeDelegate (IntPtr inst);

		static void TrashStateChanged_cb (IntPtr inst)
		{
			try {
				TrashMonitor __obj = GLib.Object.GetObject (inst, false) as TrashMonitor;
				__obj.OnTrashStateChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TrashMonitor), ConnectionMethod="OverrideTrashStateChanged")]
		protected virtual void OnTrashStateChanged ()
		{
			InternalTrashStateChanged ();
		}

		private void InternalTrashStateChanged ()
		{
			TrashStateChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).TrashStateChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkTrashMonitorClass {
			public TrashStateChangedNativeDelegate TrashStateChanged;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkTrashMonitorClass> class_structs;

		static GtkTrashMonitorClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkTrashMonitorClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkTrashMonitorClass class_struct = (GtkTrashMonitorClass) Marshal.PtrToStructure (class_ptr, typeof (GtkTrashMonitorClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkTrashMonitorClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

#endregion
	}
}
