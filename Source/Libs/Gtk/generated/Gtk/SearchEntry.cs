// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SearchEntry : Gtk.Entry {

		public SearchEntry (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_search_entry_new();

		public SearchEntry () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SearchEntry)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_search_entry_new();
		}

		[GLib.Signal("search-changed")]
		public event System.EventHandler SearchChanged {
			add {
				this.AddSignalHandler ("search-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("search-changed", value);
			}
		}

		[GLib.Signal("stop-search")]
		public event System.EventHandler StopSearch {
			add {
				this.AddSignalHandler ("stop-search", value);
			}
			remove {
				this.RemoveSignalHandler ("stop-search", value);
			}
		}

		[GLib.Signal("next-match")]
		public event System.EventHandler NextMatch {
			add {
				this.AddSignalHandler ("next-match", value);
			}
			remove {
				this.RemoveSignalHandler ("next-match", value);
			}
		}

		[GLib.Signal("previous-match")]
		public event System.EventHandler PreviousMatch {
			add {
				this.AddSignalHandler ("previous-match", value);
			}
			remove {
				this.RemoveSignalHandler ("previous-match", value);
			}
		}

		static SearchChangedNativeDelegate SearchChanged_cb_delegate;
		static SearchChangedNativeDelegate SearchChangedVMCallback {
			get {
				if (SearchChanged_cb_delegate == null)
					SearchChanged_cb_delegate = new SearchChangedNativeDelegate (SearchChanged_cb);
				return SearchChanged_cb_delegate;
			}
		}

		static void OverrideSearchChanged (GLib.GType gtype)
		{
			OverrideSearchChanged (gtype, SearchChangedVMCallback);
		}

		static void OverrideSearchChanged (GLib.GType gtype, SearchChangedNativeDelegate callback)
		{
			GtkSearchEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.SearchChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SearchChangedNativeDelegate (IntPtr inst);

		static void SearchChanged_cb (IntPtr inst)
		{
			try {
				SearchEntry __obj = GLib.Object.GetObject (inst, false) as SearchEntry;
				__obj.OnSearchChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SearchEntry), ConnectionMethod="OverrideSearchChanged")]
		protected virtual void OnSearchChanged ()
		{
			InternalSearchChanged ();
		}

		private void InternalSearchChanged ()
		{
			SearchChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SearchChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static NextMatchNativeDelegate NextMatch_cb_delegate;
		static NextMatchNativeDelegate NextMatchVMCallback {
			get {
				if (NextMatch_cb_delegate == null)
					NextMatch_cb_delegate = new NextMatchNativeDelegate (NextMatch_cb);
				return NextMatch_cb_delegate;
			}
		}

		static void OverrideNextMatch (GLib.GType gtype)
		{
			OverrideNextMatch (gtype, NextMatchVMCallback);
		}

		static void OverrideNextMatch (GLib.GType gtype, NextMatchNativeDelegate callback)
		{
			GtkSearchEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.NextMatch = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void NextMatchNativeDelegate (IntPtr inst);

		static void NextMatch_cb (IntPtr inst)
		{
			try {
				SearchEntry __obj = GLib.Object.GetObject (inst, false) as SearchEntry;
				__obj.OnNextMatch ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SearchEntry), ConnectionMethod="OverrideNextMatch")]
		protected virtual void OnNextMatch ()
		{
			InternalNextMatch ();
		}

		private void InternalNextMatch ()
		{
			NextMatchNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).NextMatch;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static PreviousMatchNativeDelegate PreviousMatch_cb_delegate;
		static PreviousMatchNativeDelegate PreviousMatchVMCallback {
			get {
				if (PreviousMatch_cb_delegate == null)
					PreviousMatch_cb_delegate = new PreviousMatchNativeDelegate (PreviousMatch_cb);
				return PreviousMatch_cb_delegate;
			}
		}

		static void OverridePreviousMatch (GLib.GType gtype)
		{
			OverridePreviousMatch (gtype, PreviousMatchVMCallback);
		}

		static void OverridePreviousMatch (GLib.GType gtype, PreviousMatchNativeDelegate callback)
		{
			GtkSearchEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.PreviousMatch = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PreviousMatchNativeDelegate (IntPtr inst);

		static void PreviousMatch_cb (IntPtr inst)
		{
			try {
				SearchEntry __obj = GLib.Object.GetObject (inst, false) as SearchEntry;
				__obj.OnPreviousMatch ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SearchEntry), ConnectionMethod="OverridePreviousMatch")]
		protected virtual void OnPreviousMatch ()
		{
			InternalPreviousMatch ();
		}

		private void InternalPreviousMatch ()
		{
			PreviousMatchNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PreviousMatch;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static StopSearchNativeDelegate StopSearch_cb_delegate;
		static StopSearchNativeDelegate StopSearchVMCallback {
			get {
				if (StopSearch_cb_delegate == null)
					StopSearch_cb_delegate = new StopSearchNativeDelegate (StopSearch_cb);
				return StopSearch_cb_delegate;
			}
		}

		static void OverrideStopSearch (GLib.GType gtype)
		{
			OverrideStopSearch (gtype, StopSearchVMCallback);
		}

		static void OverrideStopSearch (GLib.GType gtype, StopSearchNativeDelegate callback)
		{
			GtkSearchEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.StopSearch = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void StopSearchNativeDelegate (IntPtr inst);

		static void StopSearch_cb (IntPtr inst)
		{
			try {
				SearchEntry __obj = GLib.Object.GetObject (inst, false) as SearchEntry;
				__obj.OnStopSearch ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SearchEntry), ConnectionMethod="OverrideStopSearch")]
		protected virtual void OnStopSearch ()
		{
			InternalStopSearch ();
		}

		private void InternalStopSearch ()
		{
			StopSearchNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).StopSearch;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSearchEntryClass {
			public SearchChangedNativeDelegate SearchChanged;
			public NextMatchNativeDelegate NextMatch;
			public PreviousMatchNativeDelegate PreviousMatch;
			public StopSearchNativeDelegate StopSearch;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Entry)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSearchEntryClass> class_structs;

		static GtkSearchEntryClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSearchEntryClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSearchEntryClass class_struct = (GtkSearchEntryClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSearchEntryClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSearchEntryClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_search_entry_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_search_entry_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_search_entry_handle_event(IntPtr raw, IntPtr evnt);

		public bool HandleEvent(Gdk.Event evnt) {
			bool raw_ret = gtk_search_entry_handle_event(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
