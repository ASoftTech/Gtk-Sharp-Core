// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SearchBar : Gtk.Bin {

		public SearchBar (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_search_bar_new();

		public SearchBar () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SearchBar)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_search_bar_new();
		}

		[GLib.Property ("search-mode-enabled")]
		public bool SearchModeEnabled {
			get {
				GLib.Value val = GetProperty ("search-mode-enabled");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("search-mode-enabled", val);
				val.Dispose ();
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_search_bar_get_show_close_button(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_search_bar_set_show_close_button(IntPtr raw, bool visible);

		[GLib.Property ("show-close-button")]
		public bool ShowCloseButton {
			get  {
				bool raw_ret = gtk_search_bar_get_show_close_button(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_search_bar_set_show_close_button(Handle, value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSearchBarClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Bin)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSearchBarClass> class_structs;

		static GtkSearchBarClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSearchBarClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSearchBarClass class_struct = (GtkSearchBarClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSearchBarClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSearchBarClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_search_bar_connect_entry(IntPtr raw, IntPtr entry);

		public void ConnectEntry(Gtk.Entry entry) {
			gtk_search_bar_connect_entry(Handle, entry == null ? IntPtr.Zero : entry.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_search_bar_get_search_mode(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_search_bar_set_search_mode(IntPtr raw, bool search_mode);

		public bool SearchMode { 
			get {
				bool raw_ret = gtk_search_bar_get_search_mode(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_search_bar_set_search_mode(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_search_bar_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_search_bar_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_search_bar_handle_event(IntPtr raw, IntPtr evnt);

		public bool HandleEvent(Gdk.Event evnt) {
			bool raw_ret = gtk_search_bar_handle_event(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
