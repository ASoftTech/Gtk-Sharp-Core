// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class StyleProperties : GLib.Object, Gtk.IStyleProvider {

		public StyleProperties (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_properties_new();

		public StyleProperties () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (StyleProperties)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_style_properties_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkStylePropertiesClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkStylePropertiesClass> class_structs;

		static GtkStylePropertiesClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkStylePropertiesClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkStylePropertiesClass class_struct = (GtkStylePropertiesClass) Marshal.PtrToStructure (class_ptr, typeof (GtkStylePropertiesClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkStylePropertiesClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_properties_clear(IntPtr raw);

		[Obsolete]
		public void Clear() {
			gtk_style_properties_clear(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_style_properties_get_property(IntPtr raw, IntPtr property, int state, IntPtr value);

		[Obsolete]
		public bool GetProperty(string property, Gtk.StateFlags state, GLib.Value value) {
			IntPtr native_property = GLib.Marshaller.StringToPtrGStrdup (property);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool raw_ret = gtk_style_properties_get_property(Handle, native_property, (int) state, native_value);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_property);
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_properties_get_type();

		[Obsolete]
		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_style_properties_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_properties_get_valist(IntPtr raw, int state, IntPtr args);

		[Obsolete]
		public void GetValist(Gtk.StateFlags state, IntPtr args) {
			gtk_style_properties_get_valist(Handle, (int) state, args);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_properties_lookup_color(IntPtr raw, IntPtr name);

		[Obsolete]
		public Gtk.SymbolicColor LookupColor(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gtk_style_properties_lookup_color(Handle, native_name);
			Gtk.SymbolicColor ret = raw_ret == IntPtr.Zero ? null : (Gtk.SymbolicColor) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.SymbolicColor), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_style_properties_lookup_property(IntPtr property_name, GtkSharp.StylePropertyParserNative parse_func, IntPtr pspec);

		[Obsolete]
		public static bool LookupProperty(string property_name, Gtk.StylePropertyParser parse_func, IntPtr pspec) {
			IntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);
			GtkSharp.StylePropertyParserWrapper parse_func_wrapper = new GtkSharp.StylePropertyParserWrapper (parse_func);
			bool raw_ret = gtk_style_properties_lookup_property(native_property_name, parse_func_wrapper.NativeDelegate, pspec);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_property_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_properties_map_color(IntPtr raw, IntPtr name, IntPtr color);

		[Obsolete]
		public void MapColor(string name, Gtk.SymbolicColor color) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_style_properties_map_color(Handle, native_name, color == null ? IntPtr.Zero : color.Handle);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_properties_merge(IntPtr raw, IntPtr props_to_merge, bool replace);

		[Obsolete]
		public void Merge(Gtk.StyleProperties props_to_merge, bool replace) {
			gtk_style_properties_merge(Handle, props_to_merge == null ? IntPtr.Zero : props_to_merge.Handle, replace);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_properties_register_property(GtkSharp.StylePropertyParserNative parse_func, IntPtr pspec);

		[Obsolete]
		public static void RegisterProperty(Gtk.StylePropertyParser parse_func, IntPtr pspec) {
			GtkSharp.StylePropertyParserWrapper parse_func_wrapper = new GtkSharp.StylePropertyParserWrapper (parse_func);
			gtk_style_properties_register_property(parse_func_wrapper.NativeDelegate, pspec);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_properties_set_property(IntPtr raw, IntPtr property, int state, IntPtr value);

		[Obsolete]
		public void SetProperty(string property, Gtk.StateFlags state, GLib.Value value) {
			IntPtr native_property = GLib.Marshaller.StringToPtrGStrdup (property);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			gtk_style_properties_set_property(Handle, native_property, (int) state, native_value);
			GLib.Marshaller.Free (native_property);
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_properties_set_valist(IntPtr raw, int state, IntPtr args);

		[Obsolete]
		public void SetValist(Gtk.StateFlags state, IntPtr args) {
			gtk_style_properties_set_valist(Handle, (int) state, args);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_properties_unset_property(IntPtr raw, IntPtr property, int state);

		[Obsolete]
		public void UnsetProperty(string property, Gtk.StateFlags state) {
			IntPtr native_property = GLib.Marshaller.StringToPtrGStrdup (property);
			gtk_style_properties_unset_property(Handle, native_property, (int) state);
			GLib.Marshaller.Free (native_property);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_style_provider_get_style_property(IntPtr raw, IntPtr path, int state, IntPtr pspec, IntPtr value);

		public bool GetStyleProperty(Gtk.WidgetPath path, Gtk.StateFlags state, IntPtr pspec, GLib.Value value) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool raw_ret = gtk_style_provider_get_style_property(Handle, path == null ? IntPtr.Zero : path.Handle, (int) state, pspec, native_value);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

#endregion
	}
}
