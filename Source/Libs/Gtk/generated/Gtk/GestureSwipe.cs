// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GestureSwipe : Gtk.GestureSingle {

		public GestureSwipe (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_gesture_swipe_new(IntPtr widget);

		public GestureSwipe (Gtk.Widget widget) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GestureSwipe)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (widget != null) {
					names.Add ("widget");
					vals.Add (new GLib.Value (widget));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_gesture_swipe_new(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[GLib.Signal("swipe")]
		public event Gtk.SwipeHandler Swipe {
			add {
				this.AddSignalHandler ("swipe", value, typeof (Gtk.SwipeArgs));
			}
			remove {
				this.RemoveSignalHandler ("swipe", value);
			}
		}

		static SwipeNativeDelegate Swipe_cb_delegate;
		static SwipeNativeDelegate SwipeVMCallback {
			get {
				if (Swipe_cb_delegate == null)
					Swipe_cb_delegate = new SwipeNativeDelegate (Swipe_cb);
				return Swipe_cb_delegate;
			}
		}

		static void OverrideSwipe (GLib.GType gtype)
		{
			OverrideSwipe (gtype, SwipeVMCallback);
		}

		static void OverrideSwipe (GLib.GType gtype, SwipeNativeDelegate callback)
		{
			GtkGestureSwipeClass class_iface = GetClassStruct (gtype, false);
			class_iface.Swipe = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SwipeNativeDelegate (IntPtr inst, double velocity_x, double velocity_y);

		static void Swipe_cb (IntPtr inst, double velocity_x, double velocity_y)
		{
			try {
				GestureSwipe __obj = GLib.Object.GetObject (inst, false) as GestureSwipe;
				__obj.OnSwipe (velocity_x, velocity_y);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.GestureSwipe), ConnectionMethod="OverrideSwipe")]
		protected virtual void OnSwipe (double velocity_x, double velocity_y)
		{
			InternalSwipe (velocity_x, velocity_y);
		}

		private void InternalSwipe (double velocity_x, double velocity_y)
		{
			SwipeNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Swipe;
			if (unmanaged == null) return;

			unmanaged (this.Handle, velocity_x, velocity_y);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkGestureSwipeClass {
			public SwipeNativeDelegate Swipe;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.GestureSingle)).GetClassSize ();
		static Dictionary<GLib.GType, GtkGestureSwipeClass> class_structs;

		static GtkGestureSwipeClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkGestureSwipeClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkGestureSwipeClass class_struct = (GtkGestureSwipeClass) Marshal.PtrToStructure (class_ptr, typeof (GtkGestureSwipeClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkGestureSwipeClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_gesture_swipe_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_gesture_swipe_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_gesture_swipe_get_velocity(IntPtr raw, out double velocity_x, out double velocity_y);

		public bool GetVelocity(out double velocity_x, out double velocity_y) {
			bool raw_ret = gtk_gesture_swipe_get_velocity(Handle, out velocity_x, out velocity_y);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
