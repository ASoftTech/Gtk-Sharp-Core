// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ListBoxRow : Gtk.Bin {

		public ListBoxRow (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_list_box_row_new();

		public ListBoxRow () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ListBoxRow)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_list_box_row_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_list_box_row_get_activatable(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_list_box_row_set_activatable(IntPtr raw, bool activatable);

		[GLib.Property ("activatable")]
		public bool Activatable {
			get  {
				bool raw_ret = gtk_list_box_row_get_activatable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_list_box_row_set_activatable(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_list_box_row_get_selectable(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_list_box_row_set_selectable(IntPtr raw, bool selectable);

		[GLib.Property ("selectable")]
		public bool Selectable {
			get  {
				bool raw_ret = gtk_list_box_row_get_selectable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_list_box_row_set_selectable(Handle, value);
			}
		}

		[GLib.Signal("activate")]
		public event System.EventHandler Activate {
			add {
				this.AddSignalHandler ("activate", value);
			}
			remove {
				this.RemoveSignalHandler ("activate", value);
			}
		}

		static ActivateNativeDelegate Activate_cb_delegate;
		static ActivateNativeDelegate ActivateVMCallback {
			get {
				if (Activate_cb_delegate == null)
					Activate_cb_delegate = new ActivateNativeDelegate (Activate_cb);
				return Activate_cb_delegate;
			}
		}

		static void OverrideActivate (GLib.GType gtype)
		{
			OverrideActivate (gtype, ActivateVMCallback);
		}

		static void OverrideActivate (GLib.GType gtype, ActivateNativeDelegate callback)
		{
			GtkListBoxRowClass class_iface = GetClassStruct (gtype, false);
			class_iface.Activate = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivateNativeDelegate (IntPtr inst);

		static void Activate_cb (IntPtr inst)
		{
			try {
				ListBoxRow __obj = GLib.Object.GetObject (inst, false) as ListBoxRow;
				__obj.OnActivate ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ListBoxRow), ConnectionMethod="OverrideActivate")]
		protected virtual void OnActivate ()
		{
			InternalActivate ();
		}

		private void InternalActivate ()
		{
			ActivateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Activate;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkListBoxRowClass {
			public ActivateNativeDelegate Activate;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Bin)).GetClassSize ();
		static Dictionary<GLib.GType, GtkListBoxRowClass> class_structs;

		static GtkListBoxRowClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkListBoxRowClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkListBoxRowClass class_struct = (GtkListBoxRowClass) Marshal.PtrToStructure (class_ptr, typeof (GtkListBoxRowClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkListBoxRowClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_list_box_row_changed(IntPtr raw);

		public void Changed() {
			gtk_list_box_row_changed(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_list_box_row_get_header(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_list_box_row_set_header(IntPtr raw, IntPtr header);

		public Gtk.Widget Header { 
			get {
				IntPtr raw_ret = gtk_list_box_row_get_header(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set {
				gtk_list_box_row_set_header(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_list_box_row_get_index(IntPtr raw);

		public int Index { 
			get {
				int raw_ret = gtk_list_box_row_get_index(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_list_box_row_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_list_box_row_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_list_box_row_is_selected(IntPtr raw);

		public bool IsSelected { 
			get {
				bool raw_ret = gtk_list_box_row_is_selected(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

#endregion
	}
}
