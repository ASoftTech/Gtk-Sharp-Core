// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ShortcutLabel : Gtk.Box {

		public ShortcutLabel (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_shortcut_label_new(IntPtr accelerator);

		public ShortcutLabel (string accelerator) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ShortcutLabel)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("accelerator");
				vals.Add (new GLib.Value (accelerator));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_accelerator = GLib.Marshaller.StringToPtrGStrdup (accelerator);
			Raw = gtk_shortcut_label_new(native_accelerator);
			GLib.Marshaller.Free (native_accelerator);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_shortcut_label_get_accelerator(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_shortcut_label_set_accelerator(IntPtr raw, IntPtr accelerator);

		[GLib.Property ("accelerator")]
		public string Accelerator {
			get  {
				IntPtr raw_ret = gtk_shortcut_label_get_accelerator(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_shortcut_label_set_accelerator(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_shortcut_label_get_disabled_text(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_shortcut_label_set_disabled_text(IntPtr raw, IntPtr disabled_text);

		[GLib.Property ("disabled-text")]
		public string DisabledText {
			get  {
				IntPtr raw_ret = gtk_shortcut_label_get_disabled_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_shortcut_label_set_disabled_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkShortcutLabelClass {
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Box)).GetClassSize ();
		static Dictionary<GLib.GType, GtkShortcutLabelClass> class_structs;

		static GtkShortcutLabelClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkShortcutLabelClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkShortcutLabelClass class_struct = (GtkShortcutLabelClass) Marshal.PtrToStructure (class_ptr, typeof (GtkShortcutLabelClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkShortcutLabelClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_shortcut_label_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_shortcut_label_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
