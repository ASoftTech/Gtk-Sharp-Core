// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class CssProvider : GLib.Object, Gtk.IStyleProvider {

		public CssProvider (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_css_provider_new();

		public CssProvider () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CssProvider)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_css_provider_new();
		}

		[GLib.Signal("parsing-error")]
		public event Gtk.ParsingErrorHandler ParsingError {
			add {
				this.AddSignalHandler ("parsing-error", value, typeof (Gtk.ParsingErrorArgs));
			}
			remove {
				this.RemoveSignalHandler ("parsing-error", value);
			}
		}

		static ParsingErrorNativeDelegate ParsingError_cb_delegate;
		static ParsingErrorNativeDelegate ParsingErrorVMCallback {
			get {
				if (ParsingError_cb_delegate == null)
					ParsingError_cb_delegate = new ParsingErrorNativeDelegate (ParsingError_cb);
				return ParsingError_cb_delegate;
			}
		}

		static void OverrideParsingError (GLib.GType gtype)
		{
			OverrideParsingError (gtype, ParsingErrorVMCallback);
		}

		static void OverrideParsingError (GLib.GType gtype, ParsingErrorNativeDelegate callback)
		{
			GtkCssProviderClass class_iface = GetClassStruct (gtype, false);
			class_iface.ParsingError = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ParsingErrorNativeDelegate (IntPtr inst, IntPtr section, IntPtr error);

		static void ParsingError_cb (IntPtr inst, IntPtr section, IntPtr error)
		{
			try {
				CssProvider __obj = GLib.Object.GetObject (inst, false) as CssProvider;
				__obj.OnParsingError (section == IntPtr.Zero ? null : (Gtk.CssSection) GLib.Opaque.GetOpaque (section, typeof (Gtk.CssSection), false), error);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CssProvider), ConnectionMethod="OverrideParsingError")]
		protected virtual void OnParsingError (Gtk.CssSection section, IntPtr error)
		{
			InternalParsingError (section, error);
		}

		private void InternalParsingError (Gtk.CssSection section, IntPtr error)
		{
			ParsingErrorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ParsingError;
			if (unmanaged == null) return;

			unmanaged (this.Handle, section == null ? IntPtr.Zero : section.Handle, error);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkCssProviderClass {
			public ParsingErrorNativeDelegate ParsingError;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkCssProviderClass> class_structs;

		static GtkCssProviderClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkCssProviderClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkCssProviderClass class_struct = (GtkCssProviderClass) Marshal.PtrToStructure (class_ptr, typeof (GtkCssProviderClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkCssProviderClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_css_provider_error_quark();

		public static int ErrorQuark() {
			int raw_ret = gtk_css_provider_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_css_provider_get_default();

		public static Gtk.CssProvider Default { 
			get {
				IntPtr raw_ret = gtk_css_provider_get_default();
				Gtk.CssProvider ret = GLib.Object.GetObject(raw_ret) as Gtk.CssProvider;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_css_provider_get_named(IntPtr name, IntPtr variant);

		public static Gtk.CssProvider GetNamed(string name, string variant) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_variant = GLib.Marshaller.StringToPtrGStrdup (variant);
			IntPtr raw_ret = gtk_css_provider_get_named(native_name, native_variant);
			Gtk.CssProvider ret = GLib.Object.GetObject(raw_ret) as Gtk.CssProvider;
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_variant);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_css_provider_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_css_provider_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_css_provider_load_from_data(IntPtr raw, IntPtr data, IntPtr length, out IntPtr error);

		public unsafe bool LoadFromData(string data) {
			IntPtr native_data = GLib.Marshaller.StringToPtrGStrdup (data);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_css_provider_load_from_data(Handle, native_data, new IntPtr ((long) System.Text.Encoding.UTF8.GetByteCount (data)), out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_data);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_css_provider_load_from_file(IntPtr raw, IntPtr file, out IntPtr error);

		public unsafe bool LoadFromFile(GLib.IFile file) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_css_provider_load_from_file(Handle, file == null ? IntPtr.Zero : ((file is GLib.Object) ? (file as GLib.Object).Handle : (file as GLib.FileAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_css_provider_load_from_path(IntPtr raw, IntPtr path, out IntPtr error);

		public unsafe bool LoadFromPath(string path) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_css_provider_load_from_path(Handle, native_path, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_path);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_css_provider_load_from_resource(IntPtr raw, IntPtr resource_path);

		public void LoadFromResource(string resource_path) {
			IntPtr native_resource_path = GLib.Marshaller.StringToPtrGStrdup (resource_path);
			gtk_css_provider_load_from_resource(Handle, native_resource_path);
			GLib.Marshaller.Free (native_resource_path);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_css_provider_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = gtk_css_provider_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_style_provider_get_style_property(IntPtr raw, IntPtr path, int state, IntPtr pspec, IntPtr value);

		public bool GetStyleProperty(Gtk.WidgetPath path, Gtk.StateFlags state, IntPtr pspec, GLib.Value value) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool raw_ret = gtk_style_provider_get_style_property(Handle, path == null ? IntPtr.Zero : path.Handle, (int) state, pspec, native_value);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

#endregion
	}
}
