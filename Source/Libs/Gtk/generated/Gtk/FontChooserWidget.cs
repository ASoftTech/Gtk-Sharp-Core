// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FontChooserWidget : Gtk.Box, Gtk.IFontChooser {

		public FontChooserWidget (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_chooser_widget_new();

		public FontChooserWidget () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FontChooserWidget)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_font_chooser_widget_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkFontChooserWidgetClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
			IntPtr GtkReserved5;
			IntPtr GtkReserved6;
			IntPtr GtkReserved7;
			IntPtr GtkReserved8;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Box)).GetClassSize ();
		static Dictionary<GLib.GType, GtkFontChooserWidgetClass> class_structs;

		static GtkFontChooserWidgetClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkFontChooserWidgetClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkFontChooserWidgetClass class_struct = (GtkFontChooserWidgetClass) Marshal.PtrToStructure (class_ptr, typeof (GtkFontChooserWidgetClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkFontChooserWidgetClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_chooser_widget_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_font_chooser_widget_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_chooser_get_font_face(IntPtr raw);

		public Pango.FontFace FontFace { 
			get {
				IntPtr raw_ret = gtk_font_chooser_get_font_face(Handle);
				Pango.FontFace ret = GLib.Object.GetObject(raw_ret) as Pango.FontFace;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_chooser_get_font_family(IntPtr raw);

		public Pango.FontFamily FontFamily { 
			get {
				IntPtr raw_ret = gtk_font_chooser_get_font_family(Handle);
				Pango.FontFamily ret = GLib.Object.GetObject(raw_ret) as Pango.FontFamily;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_chooser_get_font_map(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_chooser_set_font_map(IntPtr raw, IntPtr fontmap);

		public new Pango.FontMap FontMap { 
			get {
				IntPtr raw_ret = gtk_font_chooser_get_font_map(Handle);
				Pango.FontMap ret = GLib.Object.GetObject(raw_ret) as Pango.FontMap;
				return ret;
			}
			set {
				gtk_font_chooser_set_font_map(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_font_chooser_get_font_size(IntPtr raw);

		public int FontSize { 
			get {
				int raw_ret = gtk_font_chooser_get_font_size(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_chooser_set_filter_func(IntPtr raw, GtkSharp.FontFilterFuncNative filter, IntPtr user_data, GLib.DestroyNotify destroy);

		public Gtk.FontFilterFunc FilterFunc { 
			set {
				GtkSharp.FontFilterFuncWrapper value_wrapper = new GtkSharp.FontFilterFuncWrapper (value);
				IntPtr user_data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					user_data = IntPtr.Zero;
					destroy = null;
				} else {
					user_data = (IntPtr) GCHandle.Alloc (value_wrapper);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_font_chooser_set_filter_func(Handle, value_wrapper.NativeDelegate, user_data, destroy);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_chooser_get_font(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_chooser_set_font(IntPtr raw, IntPtr fontname);

		[GLib.Property ("font")]
		public string Font {
			get  {
				IntPtr raw_ret = gtk_font_chooser_get_font(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_font_chooser_set_font(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_chooser_get_font_desc(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_chooser_set_font_desc(IntPtr raw, IntPtr font_desc);

		[GLib.Property ("font-desc")]
		public Pango.FontDescription FontDesc {
			get  {
				IntPtr raw_ret = gtk_font_chooser_get_font_desc(Handle);
				Pango.FontDescription ret = raw_ret == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.FontDescription), false);
				return ret;
			}
			set  {
				gtk_font_chooser_set_font_desc(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_chooser_get_preview_text(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_chooser_set_preview_text(IntPtr raw, IntPtr text);

		[GLib.Property ("preview-text")]
		public string PreviewText {
			get  {
				IntPtr raw_ret = gtk_font_chooser_get_preview_text(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_font_chooser_set_preview_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_font_chooser_get_show_preview_entry(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_chooser_set_show_preview_entry(IntPtr raw, bool show_preview_entry);

		[GLib.Property ("show-preview-entry")]
		public bool ShowPreviewEntry {
			get  {
				bool raw_ret = gtk_font_chooser_get_show_preview_entry(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_font_chooser_set_show_preview_entry(Handle, value);
			}
		}

		[GLib.Signal("font-activated")]
		public event Gtk.FontActivatedHandler FontActivated {
			add {
				this.AddSignalHandler ("font-activated", value, typeof (Gtk.FontActivatedArgs));
			}
			remove {
				this.RemoveSignalHandler ("font-activated", value);
			}
		}

		static FontActivatedNativeDelegate FontActivated_cb_delegate;
		static FontActivatedNativeDelegate FontActivatedVMCallback {
			get {
				if (FontActivated_cb_delegate == null)
					FontActivated_cb_delegate = new FontActivatedNativeDelegate (FontActivated_cb);
				return FontActivated_cb_delegate;
			}
		}

		static void OverrideFontActivated (GLib.GType gtype)
		{
			OverrideFontActivated (gtype, FontActivatedVMCallback);
		}

		static void OverrideFontActivated (GLib.GType gtype, FontActivatedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "font-activated", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FontActivatedNativeDelegate (IntPtr inst, IntPtr fontname);

		static void FontActivated_cb (IntPtr inst, IntPtr fontname)
		{
			try {
				Gtk.FontChooserWidget __obj = GLib.Object.GetObject (inst, false) as Gtk.FontChooserWidget;
				__obj.OnFontActivated (GLib.Marshaller.Utf8PtrToString (fontname));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FontChooserWidget), ConnectionMethod="OverrideFontActivated")]
		protected virtual void OnFontActivated (string fontname)
		{
			InternalFontActivated (fontname);
		}

		private void InternalFontActivated (string fontname)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (fontname);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

#endregion
	}
}
