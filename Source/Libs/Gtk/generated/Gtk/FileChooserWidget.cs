// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FileChooserWidget : Gtk.Box, Gtk.IFileChooser {

		public FileChooserWidget (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_widget_new(int action);

		public FileChooserWidget (Gtk.FileChooserAction action) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FileChooserWidget)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_file_chooser_widget_new((int) action);
		}

		[GLib.Property ("search-mode")]
		public bool SearchMode {
			get {
				GLib.Value val = GetProperty ("search-mode");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("search-mode", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("subtitle")]
		public string Subtitle {
			get {
				GLib.Value val = GetProperty ("subtitle");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Signal("quick-bookmark")]
		public event Gtk.QuickBookmarkHandler QuickBookmark {
			add {
				this.AddSignalHandler ("quick-bookmark", value, typeof (Gtk.QuickBookmarkArgs));
			}
			remove {
				this.RemoveSignalHandler ("quick-bookmark", value);
			}
		}

		[GLib.Signal("up-folder")]
		public event System.EventHandler UpFolder {
			add {
				this.AddSignalHandler ("up-folder", value);
			}
			remove {
				this.RemoveSignalHandler ("up-folder", value);
			}
		}

		[GLib.Signal("down-folder")]
		public event System.EventHandler DownFolder {
			add {
				this.AddSignalHandler ("down-folder", value);
			}
			remove {
				this.RemoveSignalHandler ("down-folder", value);
			}
		}

		[GLib.Signal("search-shortcut")]
		public event System.EventHandler SearchShortcut {
			add {
				this.AddSignalHandler ("search-shortcut", value);
			}
			remove {
				this.RemoveSignalHandler ("search-shortcut", value);
			}
		}

		[GLib.Signal("places-shortcut")]
		public event System.EventHandler PlacesShortcut {
			add {
				this.AddSignalHandler ("places-shortcut", value);
			}
			remove {
				this.RemoveSignalHandler ("places-shortcut", value);
			}
		}

		[GLib.Signal("location-popup")]
		public event Gtk.LocationPopupHandler LocationPopup {
			add {
				this.AddSignalHandler ("location-popup", value, typeof (Gtk.LocationPopupArgs));
			}
			remove {
				this.RemoveSignalHandler ("location-popup", value);
			}
		}

		[GLib.Signal("desktop-folder")]
		public event System.EventHandler DesktopFolder {
			add {
				this.AddSignalHandler ("desktop-folder", value);
			}
			remove {
				this.RemoveSignalHandler ("desktop-folder", value);
			}
		}

		[GLib.Signal("show-hidden")]
		public event System.EventHandler ShowedHidden {
			add {
				this.AddSignalHandler ("show-hidden", value);
			}
			remove {
				this.RemoveSignalHandler ("show-hidden", value);
			}
		}

		[GLib.Signal("location-toggle-popup")]
		public event System.EventHandler LocationTogglePopup {
			add {
				this.AddSignalHandler ("location-toggle-popup", value);
			}
			remove {
				this.RemoveSignalHandler ("location-toggle-popup", value);
			}
		}

		[GLib.Signal("home-folder")]
		public event System.EventHandler HomeFolder {
			add {
				this.AddSignalHandler ("home-folder", value);
			}
			remove {
				this.RemoveSignalHandler ("home-folder", value);
			}
		}

		[GLib.Signal("location-popup-on-paste")]
		public event System.EventHandler LocationPopupOnPaste {
			add {
				this.AddSignalHandler ("location-popup-on-paste", value);
			}
			remove {
				this.RemoveSignalHandler ("location-popup-on-paste", value);
			}
		}

		[GLib.Signal("recent-shortcut")]
		public event System.EventHandler RecentShortcut {
			add {
				this.AddSignalHandler ("recent-shortcut", value);
			}
			remove {
				this.RemoveSignalHandler ("recent-shortcut", value);
			}
		}

		static LocationPopupNativeDelegate LocationPopup_cb_delegate;
		static LocationPopupNativeDelegate LocationPopupVMCallback {
			get {
				if (LocationPopup_cb_delegate == null)
					LocationPopup_cb_delegate = new LocationPopupNativeDelegate (LocationPopup_cb);
				return LocationPopup_cb_delegate;
			}
		}

		static void OverrideLocationPopup (GLib.GType gtype)
		{
			OverrideLocationPopup (gtype, LocationPopupVMCallback);
		}

		static void OverrideLocationPopup (GLib.GType gtype, LocationPopupNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "location-popup", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LocationPopupNativeDelegate (IntPtr inst, IntPtr p0);

		static void LocationPopup_cb (IntPtr inst, IntPtr p0)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnLocationPopup (GLib.Marshaller.PtrToStringGFree(p0));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideLocationPopup")]
		protected virtual void OnLocationPopup (string p0)
		{
			InternalLocationPopup (p0);
		}

		private void InternalLocationPopup (string p0)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static LocationPopupOnPasteNativeDelegate LocationPopupOnPaste_cb_delegate;
		static LocationPopupOnPasteNativeDelegate LocationPopupOnPasteVMCallback {
			get {
				if (LocationPopupOnPaste_cb_delegate == null)
					LocationPopupOnPaste_cb_delegate = new LocationPopupOnPasteNativeDelegate (LocationPopupOnPaste_cb);
				return LocationPopupOnPaste_cb_delegate;
			}
		}

		static void OverrideLocationPopupOnPaste (GLib.GType gtype)
		{
			OverrideLocationPopupOnPaste (gtype, LocationPopupOnPasteVMCallback);
		}

		static void OverrideLocationPopupOnPaste (GLib.GType gtype, LocationPopupOnPasteNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "location-popup-on-paste", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LocationPopupOnPasteNativeDelegate (IntPtr inst);

		static void LocationPopupOnPaste_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnLocationPopupOnPaste ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideLocationPopupOnPaste")]
		protected virtual void OnLocationPopupOnPaste ()
		{
			InternalLocationPopupOnPaste ();
		}

		private void InternalLocationPopupOnPaste ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static LocationTogglePopupNativeDelegate LocationTogglePopup_cb_delegate;
		static LocationTogglePopupNativeDelegate LocationTogglePopupVMCallback {
			get {
				if (LocationTogglePopup_cb_delegate == null)
					LocationTogglePopup_cb_delegate = new LocationTogglePopupNativeDelegate (LocationTogglePopup_cb);
				return LocationTogglePopup_cb_delegate;
			}
		}

		static void OverrideLocationTogglePopup (GLib.GType gtype)
		{
			OverrideLocationTogglePopup (gtype, LocationTogglePopupVMCallback);
		}

		static void OverrideLocationTogglePopup (GLib.GType gtype, LocationTogglePopupNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "location-toggle-popup", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LocationTogglePopupNativeDelegate (IntPtr inst);

		static void LocationTogglePopup_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnLocationTogglePopup ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideLocationTogglePopup")]
		protected virtual void OnLocationTogglePopup ()
		{
			InternalLocationTogglePopup ();
		}

		private void InternalLocationTogglePopup ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static UpFolderNativeDelegate UpFolder_cb_delegate;
		static UpFolderNativeDelegate UpFolderVMCallback {
			get {
				if (UpFolder_cb_delegate == null)
					UpFolder_cb_delegate = new UpFolderNativeDelegate (UpFolder_cb);
				return UpFolder_cb_delegate;
			}
		}

		static void OverrideUpFolder (GLib.GType gtype)
		{
			OverrideUpFolder (gtype, UpFolderVMCallback);
		}

		static void OverrideUpFolder (GLib.GType gtype, UpFolderNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "up-folder", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void UpFolderNativeDelegate (IntPtr inst);

		static void UpFolder_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnUpFolder ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideUpFolder")]
		protected virtual void OnUpFolder ()
		{
			InternalUpFolder ();
		}

		private void InternalUpFolder ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static DownFolderNativeDelegate DownFolder_cb_delegate;
		static DownFolderNativeDelegate DownFolderVMCallback {
			get {
				if (DownFolder_cb_delegate == null)
					DownFolder_cb_delegate = new DownFolderNativeDelegate (DownFolder_cb);
				return DownFolder_cb_delegate;
			}
		}

		static void OverrideDownFolder (GLib.GType gtype)
		{
			OverrideDownFolder (gtype, DownFolderVMCallback);
		}

		static void OverrideDownFolder (GLib.GType gtype, DownFolderNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "down-folder", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DownFolderNativeDelegate (IntPtr inst);

		static void DownFolder_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnDownFolder ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideDownFolder")]
		protected virtual void OnDownFolder ()
		{
			InternalDownFolder ();
		}

		private void InternalDownFolder ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static HomeFolderNativeDelegate HomeFolder_cb_delegate;
		static HomeFolderNativeDelegate HomeFolderVMCallback {
			get {
				if (HomeFolder_cb_delegate == null)
					HomeFolder_cb_delegate = new HomeFolderNativeDelegate (HomeFolder_cb);
				return HomeFolder_cb_delegate;
			}
		}

		static void OverrideHomeFolder (GLib.GType gtype)
		{
			OverrideHomeFolder (gtype, HomeFolderVMCallback);
		}

		static void OverrideHomeFolder (GLib.GType gtype, HomeFolderNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "home-folder", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void HomeFolderNativeDelegate (IntPtr inst);

		static void HomeFolder_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnHomeFolder ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideHomeFolder")]
		protected virtual void OnHomeFolder ()
		{
			InternalHomeFolder ();
		}

		private void InternalHomeFolder ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static DesktopFolderNativeDelegate DesktopFolder_cb_delegate;
		static DesktopFolderNativeDelegate DesktopFolderVMCallback {
			get {
				if (DesktopFolder_cb_delegate == null)
					DesktopFolder_cb_delegate = new DesktopFolderNativeDelegate (DesktopFolder_cb);
				return DesktopFolder_cb_delegate;
			}
		}

		static void OverrideDesktopFolder (GLib.GType gtype)
		{
			OverrideDesktopFolder (gtype, DesktopFolderVMCallback);
		}

		static void OverrideDesktopFolder (GLib.GType gtype, DesktopFolderNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "desktop-folder", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DesktopFolderNativeDelegate (IntPtr inst);

		static void DesktopFolder_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnDesktopFolder ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideDesktopFolder")]
		protected virtual void OnDesktopFolder ()
		{
			InternalDesktopFolder ();
		}

		private void InternalDesktopFolder ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static QuickBookmarkNativeDelegate QuickBookmark_cb_delegate;
		static QuickBookmarkNativeDelegate QuickBookmarkVMCallback {
			get {
				if (QuickBookmark_cb_delegate == null)
					QuickBookmark_cb_delegate = new QuickBookmarkNativeDelegate (QuickBookmark_cb);
				return QuickBookmark_cb_delegate;
			}
		}

		static void OverrideQuickBookmark (GLib.GType gtype)
		{
			OverrideQuickBookmark (gtype, QuickBookmarkVMCallback);
		}

		static void OverrideQuickBookmark (GLib.GType gtype, QuickBookmarkNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "quick-bookmark", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void QuickBookmarkNativeDelegate (IntPtr inst, int p0);

		static void QuickBookmark_cb (IntPtr inst, int p0)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnQuickBookmark (p0);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideQuickBookmark")]
		protected virtual void OnQuickBookmark (int p0)
		{
			InternalQuickBookmark (p0);
		}

		private void InternalQuickBookmark (int p0)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ShowedHiddenNativeDelegate ShowedHidden_cb_delegate;
		static ShowedHiddenNativeDelegate ShowedHiddenVMCallback {
			get {
				if (ShowedHidden_cb_delegate == null)
					ShowedHidden_cb_delegate = new ShowedHiddenNativeDelegate (ShowedHidden_cb);
				return ShowedHidden_cb_delegate;
			}
		}

		static void OverrideShowedHidden (GLib.GType gtype)
		{
			OverrideShowedHidden (gtype, ShowedHiddenVMCallback);
		}

		static void OverrideShowedHidden (GLib.GType gtype, ShowedHiddenNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "show-hidden", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ShowedHiddenNativeDelegate (IntPtr inst);

		static void ShowedHidden_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnShowedHidden ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideShowedHidden")]
		protected virtual void OnShowedHidden ()
		{
			InternalShowedHidden ();
		}

		private void InternalShowedHidden ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static SearchShortcutNativeDelegate SearchShortcut_cb_delegate;
		static SearchShortcutNativeDelegate SearchShortcutVMCallback {
			get {
				if (SearchShortcut_cb_delegate == null)
					SearchShortcut_cb_delegate = new SearchShortcutNativeDelegate (SearchShortcut_cb);
				return SearchShortcut_cb_delegate;
			}
		}

		static void OverrideSearchShortcut (GLib.GType gtype)
		{
			OverrideSearchShortcut (gtype, SearchShortcutVMCallback);
		}

		static void OverrideSearchShortcut (GLib.GType gtype, SearchShortcutNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "search-shortcut", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SearchShortcutNativeDelegate (IntPtr inst);

		static void SearchShortcut_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnSearchShortcut ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideSearchShortcut")]
		protected virtual void OnSearchShortcut ()
		{
			InternalSearchShortcut ();
		}

		private void InternalSearchShortcut ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static RecentShortcutNativeDelegate RecentShortcut_cb_delegate;
		static RecentShortcutNativeDelegate RecentShortcutVMCallback {
			get {
				if (RecentShortcut_cb_delegate == null)
					RecentShortcut_cb_delegate = new RecentShortcutNativeDelegate (RecentShortcut_cb);
				return RecentShortcut_cb_delegate;
			}
		}

		static void OverrideRecentShortcut (GLib.GType gtype)
		{
			OverrideRecentShortcut (gtype, RecentShortcutVMCallback);
		}

		static void OverrideRecentShortcut (GLib.GType gtype, RecentShortcutNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "recent-shortcut", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RecentShortcutNativeDelegate (IntPtr inst);

		static void RecentShortcut_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnRecentShortcut ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverrideRecentShortcut")]
		protected virtual void OnRecentShortcut ()
		{
			InternalRecentShortcut ();
		}

		private void InternalRecentShortcut ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static PlacesShortcutNativeDelegate PlacesShortcut_cb_delegate;
		static PlacesShortcutNativeDelegate PlacesShortcutVMCallback {
			get {
				if (PlacesShortcut_cb_delegate == null)
					PlacesShortcut_cb_delegate = new PlacesShortcutNativeDelegate (PlacesShortcut_cb);
				return PlacesShortcut_cb_delegate;
			}
		}

		static void OverridePlacesShortcut (GLib.GType gtype)
		{
			OverridePlacesShortcut (gtype, PlacesShortcutVMCallback);
		}

		static void OverridePlacesShortcut (GLib.GType gtype, PlacesShortcutNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "places-shortcut", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PlacesShortcutNativeDelegate (IntPtr inst);

		static void PlacesShortcut_cb (IntPtr inst)
		{
			try {
				FileChooserWidget __obj = GLib.Object.GetObject (inst, false) as FileChooserWidget;
				__obj.OnPlacesShortcut ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FileChooserWidget), ConnectionMethod="OverridePlacesShortcut")]
		protected virtual void OnPlacesShortcut ()
		{
			InternalPlacesShortcut ();
		}

		private void InternalPlacesShortcut ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkFileChooserWidgetClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Box)).GetClassSize ();
		static Dictionary<GLib.GType, GtkFileChooserWidgetClass> class_structs;

		static GtkFileChooserWidgetClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkFileChooserWidgetClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkFileChooserWidgetClass class_struct = (GtkFileChooserWidgetClass) Marshal.PtrToStructure (class_ptr, typeof (GtkFileChooserWidgetClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkFileChooserWidgetClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_widget_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_file_chooser_widget_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_add_choice(IntPtr raw, IntPtr id, IntPtr label, IntPtr options, IntPtr option_labels);

		public void AddChoice(string id, string label, string options, string option_labels) {
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			IntPtr native_options = GLib.Marshaller.StringToPtrGStrdup (options);
			IntPtr native_option_labels = GLib.Marshaller.StringToPtrGStrdup (option_labels);
			gtk_file_chooser_add_choice(Handle, native_id, native_label, native_options, native_option_labels);
			GLib.Marshaller.Free (native_id);
			GLib.Marshaller.Free (native_label);
			GLib.Marshaller.Free (native_options);
			GLib.Marshaller.Free (native_option_labels);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_add_filter(IntPtr raw, IntPtr filter);

		public void AddFilter(Gtk.FileFilter filter) {
			gtk_file_chooser_add_filter(Handle, filter == null ? IntPtr.Zero : filter.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_add_shortcut_folder(IntPtr raw, IntPtr folder, out IntPtr error);

		public bool AddShortcutFolder(string folder) {
			IntPtr native_folder = GLib.Marshaller.StringToFilenamePtr (folder);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_file_chooser_add_shortcut_folder(Handle, native_folder, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_folder);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_add_shortcut_folder_uri(IntPtr raw, IntPtr uri, out IntPtr error);

		public bool AddShortcutFolderUri(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_file_chooser_add_shortcut_folder_uri(Handle, native_uri, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_file_chooser_get_action(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_action(IntPtr raw, int action);

		public Gtk.FileChooserAction Action { 
			get {
				int raw_ret = gtk_file_chooser_get_action(Handle);
				Gtk.FileChooserAction ret = (Gtk.FileChooserAction) raw_ret;
				return ret;
			}
			set {
				gtk_file_chooser_set_action(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_choice(IntPtr raw, IntPtr id);

		public string GetChoice(string id) {
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr raw_ret = gtk_file_chooser_get_choice(Handle, native_id);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_id);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_get_create_folders(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_create_folders(IntPtr raw, bool create_folders);

		public bool CreateFolders { 
			get {
				bool raw_ret = gtk_file_chooser_get_create_folders(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_file_chooser_set_create_folders(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_current_folder(IntPtr raw);

		public string CurrentFolder { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_current_folder(Handle);
				string ret = GLib.Marshaller.FilenamePtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_current_folder_file(IntPtr raw);

		public GLib.IFile CurrentFolderFile { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_current_folder_file(Handle);
				GLib.IFile ret = GLib.FileAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_current_folder_uri(IntPtr raw);

		public string CurrentFolderUri { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_current_folder_uri(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_current_name(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_current_name(IntPtr raw, IntPtr name);

		public string CurrentName { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_current_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_file_chooser_set_current_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_get_do_overwrite_confirmation(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_do_overwrite_confirmation(IntPtr raw, bool do_overwrite_confirmation);

		public bool DoOverwriteConfirmation { 
			get {
				bool raw_ret = gtk_file_chooser_get_do_overwrite_confirmation(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_file_chooser_set_do_overwrite_confirmation(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_extra_widget(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_extra_widget(IntPtr raw, IntPtr extra_widget);

		public Gtk.Widget ExtraWidget { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_extra_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set {
				gtk_file_chooser_set_extra_widget(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_file(IntPtr raw);

		public GLib.IFile File { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_file(Handle);
				GLib.IFile ret = GLib.FileAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_filename(IntPtr raw);

		public string Filename { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_filename(Handle);
				string ret = GLib.Marshaller.FilenamePtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_filenames(IntPtr raw);

		public string[] Filenames { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_filenames(Handle);
				string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, true, typeof(GLib.ListBase.FilenameString));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_files(IntPtr raw);

		public GLib.IFile[] Files { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_files(Handle);
				GLib.IFile[] ret = (GLib.IFile[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(GLib.IFile));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_filter(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_filter(IntPtr raw, IntPtr filter);

		public Gtk.FileFilter Filter { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_filter(Handle);
				Gtk.FileFilter ret = GLib.Object.GetObject(raw_ret) as Gtk.FileFilter;
				return ret;
			}
			set {
				gtk_file_chooser_set_filter(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_get_local_only(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_local_only(IntPtr raw, bool local_only);

		public bool LocalOnly { 
			get {
				bool raw_ret = gtk_file_chooser_get_local_only(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_file_chooser_set_local_only(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_preview_file(IntPtr raw);

		public GLib.IFile PreviewFile { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_preview_file(Handle);
				GLib.IFile ret = GLib.FileAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_preview_filename(IntPtr raw);

		public string PreviewFilename { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_preview_filename(Handle);
				string ret = GLib.Marshaller.FilenamePtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_preview_uri(IntPtr raw);

		public string PreviewUri { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_preview_uri(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_preview_widget(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_preview_widget(IntPtr raw, IntPtr preview_widget);

		public Gtk.Widget PreviewWidget { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_preview_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set {
				gtk_file_chooser_set_preview_widget(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_get_preview_widget_active(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_preview_widget_active(IntPtr raw, bool active);

		public bool PreviewWidgetActive { 
			get {
				bool raw_ret = gtk_file_chooser_get_preview_widget_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_file_chooser_set_preview_widget_active(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_get_select_multiple(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_select_multiple(IntPtr raw, bool select_multiple);

		public bool SelectMultiple { 
			get {
				bool raw_ret = gtk_file_chooser_get_select_multiple(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_file_chooser_set_select_multiple(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_get_show_hidden(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_show_hidden(IntPtr raw, bool show_hidden);

		public bool ShowHidden { 
			get {
				bool raw_ret = gtk_file_chooser_get_show_hidden(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_file_chooser_set_show_hidden(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_uri(IntPtr raw);

		public string Uri { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_uri(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_uris(IntPtr raw);

		public string[] Uris { 
			get {
				IntPtr raw_ret = gtk_file_chooser_get_uris(Handle);
				string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, true, typeof(string));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_get_use_preview_label(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_use_preview_label(IntPtr raw, bool use_label);

		public bool UsePreviewLabel { 
			get {
				bool raw_ret = gtk_file_chooser_get_use_preview_label(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_file_chooser_set_use_preview_label(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_list_filters(IntPtr raw);

		public Gtk.FileFilter[] Filters { 
			get {
				IntPtr raw_ret = gtk_file_chooser_list_filters(Handle);
				Gtk.FileFilter[] ret = (Gtk.FileFilter[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, false, typeof(Gtk.FileFilter));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_list_shortcut_folder_uris(IntPtr raw);

		public string[] ShortcutFolderUris { 
			get {
				IntPtr raw_ret = gtk_file_chooser_list_shortcut_folder_uris(Handle);
				string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, true, typeof(string));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_list_shortcut_folders(IntPtr raw);

		public string[] ShortcutFolders { 
			get {
				IntPtr raw_ret = gtk_file_chooser_list_shortcut_folders(Handle);
				string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, true, typeof(GLib.ListBase.FilenameString));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_remove_choice(IntPtr raw, IntPtr id);

		public void RemoveChoice(string id) {
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			gtk_file_chooser_remove_choice(Handle, native_id);
			GLib.Marshaller.Free (native_id);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_remove_filter(IntPtr raw, IntPtr filter);

		public void RemoveFilter(Gtk.FileFilter filter) {
			gtk_file_chooser_remove_filter(Handle, filter == null ? IntPtr.Zero : filter.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_remove_shortcut_folder(IntPtr raw, IntPtr folder, out IntPtr error);

		public bool RemoveShortcutFolder(string folder) {
			IntPtr native_folder = GLib.Marshaller.StringToFilenamePtr (folder);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_file_chooser_remove_shortcut_folder(Handle, native_folder, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_folder);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_remove_shortcut_folder_uri(IntPtr raw, IntPtr uri, out IntPtr error);

		public bool RemoveShortcutFolderUri(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_file_chooser_remove_shortcut_folder_uri(Handle, native_uri, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_select_all(IntPtr raw);

		public void SelectAll() {
			gtk_file_chooser_select_all(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_select_file(IntPtr raw, IntPtr file, out IntPtr error);

		public bool SelectFile(GLib.IFile file) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_file_chooser_select_file(Handle, file == null ? IntPtr.Zero : ((file is GLib.Object) ? (file as GLib.Object).Handle : (file as GLib.FileAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_select_filename(IntPtr raw, IntPtr filename);

		public bool SelectFilename(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToFilenamePtr (filename);
			bool raw_ret = gtk_file_chooser_select_filename(Handle, native_filename);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_select_uri(IntPtr raw, IntPtr uri);

		public bool SelectUri(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			bool raw_ret = gtk_file_chooser_select_uri(Handle, native_uri);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_set_choice(IntPtr raw, IntPtr id, IntPtr option);

		public void SetChoice(string id, string option) {
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr native_option = GLib.Marshaller.StringToPtrGStrdup (option);
			gtk_file_chooser_set_choice(Handle, native_id, native_option);
			GLib.Marshaller.Free (native_id);
			GLib.Marshaller.Free (native_option);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_set_current_folder(IntPtr raw, IntPtr filename);

		public bool SetCurrentFolder(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToFilenamePtr (filename);
			bool raw_ret = gtk_file_chooser_set_current_folder(Handle, native_filename);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_set_current_folder_file(IntPtr raw, IntPtr file, out IntPtr error);

		public bool SetCurrentFolderFile(GLib.IFile file) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_file_chooser_set_current_folder_file(Handle, file == null ? IntPtr.Zero : ((file is GLib.Object) ? (file as GLib.Object).Handle : (file as GLib.FileAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_set_current_folder_uri(IntPtr raw, IntPtr uri);

		public bool SetCurrentFolderUri(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			bool raw_ret = gtk_file_chooser_set_current_folder_uri(Handle, native_uri);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_set_file(IntPtr raw, IntPtr file, out IntPtr error);

		public bool SetFile(GLib.IFile file) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_file_chooser_set_file(Handle, file == null ? IntPtr.Zero : ((file is GLib.Object) ? (file as GLib.Object).Handle : (file as GLib.FileAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_set_filename(IntPtr raw, IntPtr filename);

		public bool SetFilename(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToFilenamePtr (filename);
			bool raw_ret = gtk_file_chooser_set_filename(Handle, native_filename);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_chooser_set_uri(IntPtr raw, IntPtr uri);

		public bool SetUri(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			bool raw_ret = gtk_file_chooser_set_uri(Handle, native_uri);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_unselect_all(IntPtr raw);

		public void UnselectAll() {
			gtk_file_chooser_unselect_all(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_unselect_file(IntPtr raw, IntPtr file);

		public void UnselectFile(GLib.IFile file) {
			gtk_file_chooser_unselect_file(Handle, file == null ? IntPtr.Zero : ((file is GLib.Object) ? (file as GLib.Object).Handle : (file as GLib.FileAdapter).Handle));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_unselect_filename(IntPtr raw, IntPtr filename);

		public void UnselectFilename(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToFilenamePtr (filename);
			gtk_file_chooser_unselect_filename(Handle, native_filename);
			GLib.Marshaller.Free (native_filename);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_chooser_unselect_uri(IntPtr raw, IntPtr uri);

		public void UnselectUri(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			gtk_file_chooser_unselect_uri(Handle, native_uri);
			GLib.Marshaller.Free (native_uri);
		}

#endregion
	}
}
