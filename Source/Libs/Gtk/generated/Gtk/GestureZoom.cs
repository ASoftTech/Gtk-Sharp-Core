// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GestureZoom : Gtk.Gesture {

		public GestureZoom (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_gesture_zoom_new(IntPtr widget);

		public GestureZoom (Gtk.Widget widget) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GestureZoom)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (widget != null) {
					names.Add ("widget");
					vals.Add (new GLib.Value (widget));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_gesture_zoom_new(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[GLib.Signal("scale-changed")]
		public event Gtk.ScaleChangedHandler ScaleChanged {
			add {
				this.AddSignalHandler ("scale-changed", value, typeof (Gtk.ScaleChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("scale-changed", value);
			}
		}

		static ScaleChangedNativeDelegate ScaleChanged_cb_delegate;
		static ScaleChangedNativeDelegate ScaleChangedVMCallback {
			get {
				if (ScaleChanged_cb_delegate == null)
					ScaleChanged_cb_delegate = new ScaleChangedNativeDelegate (ScaleChanged_cb);
				return ScaleChanged_cb_delegate;
			}
		}

		static void OverrideScaleChanged (GLib.GType gtype)
		{
			OverrideScaleChanged (gtype, ScaleChangedVMCallback);
		}

		static void OverrideScaleChanged (GLib.GType gtype, ScaleChangedNativeDelegate callback)
		{
			GtkGestureZoomClass class_iface = GetClassStruct (gtype, false);
			class_iface.ScaleChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ScaleChangedNativeDelegate (IntPtr inst, double scale);

		static void ScaleChanged_cb (IntPtr inst, double scale)
		{
			try {
				GestureZoom __obj = GLib.Object.GetObject (inst, false) as GestureZoom;
				__obj.OnScaleChanged (scale);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.GestureZoom), ConnectionMethod="OverrideScaleChanged")]
		protected virtual void OnScaleChanged (double scale)
		{
			InternalScaleChanged (scale);
		}

		private void InternalScaleChanged (double scale)
		{
			ScaleChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ScaleChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle, scale);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkGestureZoomClass {
			public ScaleChangedNativeDelegate ScaleChanged;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Gesture)).GetClassSize ();
		static Dictionary<GLib.GType, GtkGestureZoomClass> class_structs;

		static GtkGestureZoomClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkGestureZoomClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkGestureZoomClass class_struct = (GtkGestureZoomClass) Marshal.PtrToStructure (class_ptr, typeof (GtkGestureZoomClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkGestureZoomClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_gesture_zoom_get_scale_delta(IntPtr raw);

		public double ScaleDelta { 
			get {
				double raw_ret = gtk_gesture_zoom_get_scale_delta(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_gesture_zoom_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_gesture_zoom_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
