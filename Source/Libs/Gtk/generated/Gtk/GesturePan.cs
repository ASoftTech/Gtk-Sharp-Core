// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GesturePan : Gtk.GestureDrag {

		public GesturePan (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_gesture_pan_new(IntPtr widget, int orientation);

		public GesturePan (Gtk.Widget widget, Gtk.Orientation orientation) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GesturePan)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (widget != null) {
					names.Add ("widget");
					vals.Add (new GLib.Value (widget));
				}
				names.Add ("orientation");
				vals.Add (new GLib.Value (orientation));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_gesture_pan_new(widget == null ? IntPtr.Zero : widget.Handle, (int) orientation);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_gesture_pan_get_orientation(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_gesture_pan_set_orientation(IntPtr raw, int orientation);

		[GLib.Property ("orientation")]
		public Gtk.Orientation Orientation {
			get  {
				int raw_ret = gtk_gesture_pan_get_orientation(Handle);
				Gtk.Orientation ret = (Gtk.Orientation) raw_ret;
				return ret;
			}
			set  {
				gtk_gesture_pan_set_orientation(Handle, (int) value);
			}
		}

		[GLib.Signal("pan")]
		public event Gtk.PanHandler Pan {
			add {
				this.AddSignalHandler ("pan", value, typeof (Gtk.PanArgs));
			}
			remove {
				this.RemoveSignalHandler ("pan", value);
			}
		}

		static PanNativeDelegate Pan_cb_delegate;
		static PanNativeDelegate PanVMCallback {
			get {
				if (Pan_cb_delegate == null)
					Pan_cb_delegate = new PanNativeDelegate (Pan_cb);
				return Pan_cb_delegate;
			}
		}

		static void OverridePan (GLib.GType gtype)
		{
			OverridePan (gtype, PanVMCallback);
		}

		static void OverridePan (GLib.GType gtype, PanNativeDelegate callback)
		{
			GtkGesturePanClass class_iface = GetClassStruct (gtype, false);
			class_iface.Pan = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PanNativeDelegate (IntPtr inst, int direction, double offset);

		static void Pan_cb (IntPtr inst, int direction, double offset)
		{
			try {
				GesturePan __obj = GLib.Object.GetObject (inst, false) as GesturePan;
				__obj.OnPan ((Gtk.PanDirection) direction, offset);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.GesturePan), ConnectionMethod="OverridePan")]
		protected virtual void OnPan (Gtk.PanDirection direction, double offset)
		{
			InternalPan (direction, offset);
		}

		private void InternalPan (Gtk.PanDirection direction, double offset)
		{
			PanNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Pan;
			if (unmanaged == null) return;

			unmanaged (this.Handle, (int) direction, offset);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkGesturePanClass {
			public PanNativeDelegate Pan;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.GestureDrag)).GetClassSize ();
		static Dictionary<GLib.GType, GtkGesturePanClass> class_structs;

		static GtkGesturePanClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkGesturePanClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkGesturePanClass class_struct = (GtkGesturePanClass) Marshal.PtrToStructure (class_ptr, typeof (GtkGesturePanClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkGesturePanClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_gesture_pan_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_gesture_pan_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
