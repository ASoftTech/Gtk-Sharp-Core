// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ColorChooserWidget : Gtk.Box, Gtk.IColorChooser {

		public ColorChooserWidget (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_chooser_widget_new();

		public ColorChooserWidget () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ColorChooserWidget)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_color_chooser_widget_new();
		}

		[GLib.Property ("show-editor")]
		public bool ShowEditor {
			get {
				GLib.Value val = GetProperty ("show-editor");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("show-editor", val);
				val.Dispose ();
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkColorChooserWidgetClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
			IntPtr GtkReserved5;
			IntPtr GtkReserved6;
			IntPtr GtkReserved7;
			IntPtr GtkReserved8;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Box)).GetClassSize ();
		static Dictionary<GLib.GType, GtkColorChooserWidgetClass> class_structs;

		static GtkColorChooserWidgetClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkColorChooserWidgetClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkColorChooserWidgetClass class_struct = (GtkColorChooserWidgetClass) Marshal.PtrToStructure (class_ptr, typeof (GtkColorChooserWidgetClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkColorChooserWidgetClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_chooser_widget_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_color_chooser_widget_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_chooser_add_palette(IntPtr raw, int orientation, int colors_per_line, int n_colors, IntPtr colors);

		public void AddPalette(Gtk.Orientation orientation, int colors_per_line, int n_colors, Gdk.RGBA colors) {
			IntPtr native_colors = GLib.Marshaller.StructureToPtrAlloc (colors);
			gtk_color_chooser_add_palette(Handle, (int) orientation, colors_per_line, n_colors, native_colors);
			Marshal.FreeHGlobal (native_colors);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_chooser_get_rgba(IntPtr raw, IntPtr color);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_chooser_set_rgba(IntPtr raw, IntPtr value);

		[GLib.Property ("rgba")]
		public Gdk.RGBA Rgba {
			get  {
				Gdk.RGBA color;
				IntPtr native_color = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gdk.RGBA)));
				gtk_color_chooser_get_rgba(Handle, native_color);
				color = Gdk.RGBA.New (native_color);
				Marshal.FreeHGlobal (native_color);
				return color;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gtk_color_chooser_set_rgba(Handle, native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_color_chooser_get_use_alpha(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_chooser_set_use_alpha(IntPtr raw, bool use_alpha);

		[GLib.Property ("use-alpha")]
		public bool UseAlpha {
			get  {
				bool raw_ret = gtk_color_chooser_get_use_alpha(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_color_chooser_set_use_alpha(Handle, value);
			}
		}

		[GLib.Signal("color-activated")]
		public event Gtk.ColorActivatedHandler ColorActivated {
			add {
				this.AddSignalHandler ("color-activated", value, typeof (Gtk.ColorActivatedArgs));
			}
			remove {
				this.RemoveSignalHandler ("color-activated", value);
			}
		}

		static ColorActivatedNativeDelegate ColorActivated_cb_delegate;
		static ColorActivatedNativeDelegate ColorActivatedVMCallback {
			get {
				if (ColorActivated_cb_delegate == null)
					ColorActivated_cb_delegate = new ColorActivatedNativeDelegate (ColorActivated_cb);
				return ColorActivated_cb_delegate;
			}
		}

		static void OverrideColorActivated (GLib.GType gtype)
		{
			OverrideColorActivated (gtype, ColorActivatedVMCallback);
		}

		static void OverrideColorActivated (GLib.GType gtype, ColorActivatedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "color-activated", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColorActivatedNativeDelegate (IntPtr inst, IntPtr color);

		static void ColorActivated_cb (IntPtr inst, IntPtr color)
		{
			try {
				Gtk.ColorChooserWidget __obj = GLib.Object.GetObject (inst, false) as Gtk.ColorChooserWidget;
				__obj.OnColorActivated (Gdk.RGBA.New (color));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ColorChooserWidget), ConnectionMethod="OverrideColorActivated")]
		protected virtual void OnColorActivated (Gdk.RGBA color)
		{
			InternalColorActivated (color);
		}

		private void InternalColorActivated (Gdk.RGBA color)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (color);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

#endregion
	}
}
