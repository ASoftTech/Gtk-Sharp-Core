// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ShortcutsSection : Gtk.Box {

		public ShortcutsSection (IntPtr raw) : base(raw) {}

		protected ShortcutsSection() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("section-name")]
		public string SectionName {
			get {
				GLib.Value val = GetProperty ("section-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("section-name", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("view-name")]
		public string ViewName {
			get {
				GLib.Value val = GetProperty ("view-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("view-name", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("title")]
		public string Title {
			get {
				GLib.Value val = GetProperty ("title");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("title", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("max-height")]
		public uint MaxHeight {
			get {
				GLib.Value val = GetProperty ("max-height");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("max-height", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("change-current-page")]
		public event Gtk.ChangeCurrentPageHandler ChangeCurrentPage {
			add {
				this.AddSignalHandler ("change-current-page", value, typeof (Gtk.ChangeCurrentPageArgs));
			}
			remove {
				this.RemoveSignalHandler ("change-current-page", value);
			}
		}

		static ChangeCurrentPageNativeDelegate ChangeCurrentPage_cb_delegate;
		static ChangeCurrentPageNativeDelegate ChangeCurrentPageVMCallback {
			get {
				if (ChangeCurrentPage_cb_delegate == null)
					ChangeCurrentPage_cb_delegate = new ChangeCurrentPageNativeDelegate (ChangeCurrentPage_cb);
				return ChangeCurrentPage_cb_delegate;
			}
		}

		static void OverrideChangeCurrentPage (GLib.GType gtype)
		{
			OverrideChangeCurrentPage (gtype, ChangeCurrentPageVMCallback);
		}

		static void OverrideChangeCurrentPage (GLib.GType gtype, ChangeCurrentPageNativeDelegate callback)
		{
			GtkShortcutsSectionClass class_iface = GetClassStruct (gtype, false);
			class_iface.ChangeCurrentPage = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ChangeCurrentPageNativeDelegate (IntPtr inst, int offset);

		static bool ChangeCurrentPage_cb (IntPtr inst, int offset)
		{
			try {
				ShortcutsSection __obj = GLib.Object.GetObject (inst, false) as ShortcutsSection;
				bool __result;
				__result = __obj.OnChangeCurrentPage (offset);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ShortcutsSection), ConnectionMethod="OverrideChangeCurrentPage")]
		protected virtual bool OnChangeCurrentPage (int offset)
		{
			return InternalChangeCurrentPage (offset);
		}

		private bool InternalChangeCurrentPage (int offset)
		{
			ChangeCurrentPageNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ChangeCurrentPage;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, offset);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkShortcutsSectionClass {
			public ChangeCurrentPageNativeDelegate ChangeCurrentPage;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Box)).GetClassSize ();
		static Dictionary<GLib.GType, GtkShortcutsSectionClass> class_structs;

		static GtkShortcutsSectionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkShortcutsSectionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkShortcutsSectionClass class_struct = (GtkShortcutsSectionClass) Marshal.PtrToStructure (class_ptr, typeof (GtkShortcutsSectionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkShortcutsSectionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_shortcuts_section_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_shortcuts_section_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
